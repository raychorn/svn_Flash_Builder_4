<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   width="100%" height="100%" 
		   horizontalScrollPolicy="off" verticalScrollPolicy="off"
		   resize="canvas1_resizeHandler(event)" 
		   creationComplete="windowedapplication1_creationCompleteHandler(event)">
	<mx:states>
		<s:State name="State1"/>
		<s:State name="English"/>
		<s:State name="Spanish"/>
	</mx:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.splash_movie_canvas {
			backgroundColor: #ffffff;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.CapabilitiesUtils;
			import com.HTMLToolTip;
			
			import controls.Alert.AlertPopUp;
			import controls.AppIcon;
			
			import flash.display.Screen;
			
			import mx.core.FlexGlobals;
			import mx.effects.Move;
			import mx.effects.Resize;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.events.VideoEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			
			import spark.components.VideoDisplay;
			
			import splash.SplashMovie;
			import splash.events.SplashCompletedEvent;
			
			import utils.SanityChecks;
			
			import views.MainCanvas;
			
			private var appDescriptor:XML = NativeApplication.nativeApplication.applicationDescriptor;
			private var nsDeclaration:Namespace = appDescriptor.namespace();
			
			public const build_number:String = appDescriptor.nsDeclaration::version[ 0 ] ;
			
			public var is_debugging:Boolean = false;
			
			private var popUp:SplashMovie;
			
			public var mainCanvas:MainCanvas;
			
			public var mainScreen:Screen = Screen.mainScreen;
			public var screenBounds:Rectangle = mainScreen.bounds;
			
			private var _copyrightMessage:String = "Â© 2010 AmazingFacts.Org";
			private var _creditsMessage:String = "Produced by:\nVyper Logix Corp. (http://www.VyperLogix.Com)\nand Ray C Horn (http://RayCHorn.Com)";

			private var systray:SystemTrayIcon;
			private var dock:DockIcon;
			private var copyrightCommand:NativeMenuItem = new NativeMenuItem(_copyrightMessage);
			private var creditsCommand:NativeMenuItem = new NativeMenuItem("Credits");
			private var exitCommand:NativeMenuItem = new NativeMenuItem("Exit");
			
			private var _icon:AppIcon = new AppIcon(['assets/icons/icons/PF_app_icon_16.png','assets/icons/icons/PF_app_icon_32.png','assets/icons/icons/PF_app_icon_48.png','assets/icons/icons/PF_app_icon_128.png']);
			
			public function get isLanguageEnglish():Boolean {
				return (this.currentState == 'English');
			}
			
			public function get isLanguageSpanish():Boolean {
				return (this.currentState == 'Spanish');
			}
			
			private function iconLoadComplete(e:Event):void {
				NativeApplication.nativeApplication.icon.bitmaps=[e.target.content.bitmapData];
			}
			
			private function undock(e:Event):void {
				this.stage.nativeWindow.restore();
			}
			
			private function closeApp(e:Event):void {
				NativeApplication.nativeApplication.exit();
			}
			
			private function createIconMenu(_sysTray:Boolean):NativeMenu {
				var _this:* = this;
				var iconMenu:NativeMenu = new NativeMenu();
				iconMenu.addItem(copyrightCommand);
				iconMenu.addItem(new NativeMenuItem("", true));
				iconMenu.addItem(creditsCommand);
				creditsCommand.addEventListener(Event.SELECT, function (event:Event):void {
					AlertPopUp.infoNoOkay(_this._creditsMessage,'Credits');
				});
				if (_sysTray) {
					iconMenu.addItem(new NativeMenuItem("", true));
					iconMenu.addItem(exitCommand);
					exitCommand.addEventListener(Event.SELECT, this.closeApp);
				}
				return iconMenu;
			}
			
			private function trayIcon(_sysTray:Boolean, _dock:Boolean):void {
				if (_sysTray) {
					FlexGlobals.topLevelApplication.icon.contentLoaderInfo.addEventListener(Event.COMPLETE, this.iconLoadComplete);
					FlexGlobals.topLevelApplication.icon.load(new URLRequest("assets/icons/icons/PF_app_icon_16.png"));
					systray=NativeApplication.nativeApplication.icon as SystemTrayIcon;
					systray.tooltip=this._copyrightMessage;
					systray.menu=this.createIconMenu(_sysTray);
				}
				if (_dock) {
					FlexGlobals.topLevelApplication.icon.contentLoaderInfo.addEventListener(Event.COMPLETE, this.iconLoadComplete);
					FlexGlobals.topLevelApplication.icon.load(new URLRequest("assets/icons/icons/PF_app_icon_128.png"));
					NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, undock);
					dock=NativeApplication.nativeApplication.icon as DockIcon;
					dock.menu=this.createIconMenu(_sysTray);
				}
			}
			
			private function resize_stage():void {
				var _this:ProphecyFoundationsView = this;
				var resize:Resize = new Resize(this);
				var move:Move = new Move(this);
				
				this.mainScreen = Screen.mainScreen;
				this.screenBounds = this.mainScreen.bounds;
				
				resize.widthFrom = FlexGlobals.topLevelApplication.nativeWindow.width;
				resize.widthTo = this.screenBounds.width - 100;
				resize.heightFrom = FlexGlobals.topLevelApplication.nativeWindow.height;
				resize.heightTo = this.screenBounds.height - 100;
				resize.addEventListener(EffectEvent.EFFECT_END, function (event:*):void {
					FlexGlobals.topLevelApplication.nativeWindow.width = resize.widthTo;
					FlexGlobals.topLevelApplication.nativeWindow.height = resize.heightTo;
				});
				resize.duration = 1000;
				
				move.xFrom = FlexGlobals.topLevelApplication.nativeWindow.x;
				move.xTo = 50;
				move.yFrom = FlexGlobals.topLevelApplication.nativeWindow.y;
				move.yTo = 50;
				move.addEventListener(EffectEvent.EFFECT_END, function (event:*):void {
					FlexGlobals.topLevelApplication.nativeWindow.x = move.xTo;
					FlexGlobals.topLevelApplication.nativeWindow.y = move.yTo;
					_this.x = 0;
					_this.y = 0;
					FlexGlobals.topLevelApplication.nativeWindow.minSize = new Point(1024,768);
					FlexGlobals.topLevelApplication.addEventListener(ResizeEvent.RESIZE, 
						function (event:ResizeEvent):void {
							var _width:Number = FlexGlobals.topLevelApplication.nativeWindow.width;
							var _height:Number = FlexGlobals.topLevelApplication.nativeWindow.height;
							var _widthFullScreen:Number = FlexGlobals.topLevelApplication.nativeWindow.stage.fullScreenWidth;
							var _heightFullScreen:Number = FlexGlobals.topLevelApplication.nativeWindow.stage.fullScreenHeight;
							var isFullScreen:Boolean = (_width >= _widthFullScreen) && (_height >= _heightFullScreen)
							var app:* = event.currentTarget;
							var aChild:*;
							var aParent:*;
							var children:Array = app.view.mainCanvas.getChildren();
							app.view.width = _width;
							app.view.height = _height;
							for (var i:* in children) {
								try {
									aChild = children[i];
									if (aChild.id.indexOf('html') > -1) {
										aParent = aChild.parentDocument;
										aChild.width = _width - 350;
										aChild.height = _height - 200;
										aParent.width = aChild.width + 335;
										aParent.height = aChild.height + 165;
									}
								} catch (err:Error) {}
							}
						}
					);
				});
				move.duration = 1000;
				
				resize.play();
				move.play();
			}
			
			private function show_mainCanvas():void {
				this.mainCanvas = new MainCanvas();
				this.mainCanvas.x = 0;
				this.mainCanvas.y = 0;
				this.mainCanvas.percentWidth = this.mainCanvas.percentHeight = 100.0;
				this.mainCanvas.minWidth = 1024;
				this.mainCanvas.minHeight = 768;
				this.addElement(this.mainCanvas);
			}
			
			public function applicationExit():void {
				var exitingEvent:Event = new Event(Event.EXITING, false, true);
				NativeApplication.nativeApplication.dispatchEvent(exitingEvent);
				if (!exitingEvent.isDefaultPrevented()) {
					NativeApplication.nativeApplication.exit();
				}
			}
			
			private function determine_debugging_Level():void {
				var aUrl:String = FlexGlobals.topLevelApplication.url;
				var aFile:File = new File(aUrl);
				var fname:String = aFile.nativePath.toLowerCase();
				this.is_debugging = ( ((fname.indexOf('z:\\') > -1) || (fname.indexOf('c:\\@3\\@workspace\\') > -1)) && (fname.indexOf('\\bin-debug\\') > -1) ) ? true : this.is_debugging;
			}
			
			private function determine_capabilities():void {
				var c:CapabilitiesUtils = new CapabilitiesUtils();
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void {
				var _this:* = this;
				this.determine_debugging_Level();
				this.determine_capabilities();
				var _splash:SplashMovie = new SplashMovie();
				_splash.currentState = this.currentState.toLowerCase();
				_splash.addEventListener(FlexEvent.CREATION_COMPLETE, function (event:FlexEvent):void {
					var splsh:SplashMovie = event.currentTarget as SplashMovie;
					splsh.x = 0;
					splsh.y = 0;
					splsh.percentWidth = splsh.percentHeight = 100;
					splsh.flv.addEventListener(FlexEvent.CREATION_COMPLETE, function (event:FlexEvent):void {
						var flv:VideoDisplay = event.currentTarget as VideoDisplay;
						flv.play();
					});
				});
				ToolTipManager.toolTipClass = HTMLToolTip;
				
				this.trayIcon(NativeApplication.supportsSystemTrayIcon, NativeApplication.supportsDockIcon);
				
				this._icon.addEventListener(Event.COMPLETE,function():void {
					NativeApplication.nativeApplication.icon.bitmaps = _this._icon.bitmaps;
				});
				this._icon.loadImages();
				
				FlexGlobals.topLevelApplication.nativeWindow.width = 700;
				FlexGlobals.topLevelApplication.nativeWindow.height = 738;
				FlexGlobals.topLevelApplication.nativeWindow.x = (Capabilities.screenResolutionX - FlexGlobals.topLevelApplication.nativeWindow.width) / 2;
				FlexGlobals.topLevelApplication.nativeWindow.y = (Capabilities.screenResolutionY - FlexGlobals.topLevelApplication.nativeWindow.height) / 2;
				
				FlexGlobals.topLevelApplication.alwaysInFront = true;
				
				this.popUp = PopUpManager.createPopUp(this, SplashMovie, true) as SplashMovie;
				this.popUp.x = 0;
				this.popUp.y = 0;
				this.popUp.styleName = 'splash_movie_canvas';
				this.popUp.width = FlexGlobals.topLevelApplication.nativeWindow.width;
				this.popUp.height = FlexGlobals.topLevelApplication.nativeWindow.height;
				this.popUp.currentState = this.currentState.toLowerCase();
				
				this.addEventListener(SplashCompletedEvent.TYPE_SPLASH_COMPLETED, function (event:SplashCompletedEvent):void {
					PopUpManager.removePopUp(_this.popUp);
					_this.resize_stage();
					_this.show_mainCanvas();
				});
			}
			

			protected function canvas1_resizeHandler(event:ResizeEvent):void {
				// TODO Auto-generated method stub
			}

		]]>
	</fx:Script>
</mx:Canvas>
