<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	creationComplete="init()" resize="onResize()">
	<mx:HBox id="glinkcontainer" y="{gLinksY}" horizontalGap="{gLinksGap}" paddingRight="{gLinksPadR}"> 
	</mx:HBox>
		<mx:Script>
			<![CDATA[
				import mx.events.FlexEvent;
				import mx.containers.VBox;
				import mx.collections.errors.CursorError;
				import mx.managers.CursorManager;
				import communication.WebServices;
				import models.Menu_Model;
				import libs.utils.ErrorMessages;
				import mx.controls.Label;
				import utils.displayObject.DuplicateImage;
				import libs.vo.GlobalsVO;
				import libs.utils.ExtendedChars;
			
				[Bindable]
				private var gLinksGap:Number;
				
				[Bindable]
				private var gLinksPadR:Number;
				
				[Bindable]
				private var gLinksY:Number;
				
				private var _mcr:*;
				private var lobCount:int;
				private var arr:Array;
				private var _currentSelect:Object;
				private var _tabOrder:int = 0;
				private var _extVars:Object = GlobalsVO.getGlobal(GlobalsVO.EXTERNALVARS);
				private var _isAdmin:Boolean = Boolean(GlobalsVO.getGlobal(GlobalsVO.ISADMIN));

				// CSS Style
				private const DEFAULT_STYLE:String = "HeaderGlinkMouseOut";
				
				// Style Mode
				private const MODE:String = "select";
				

				private const DIVIDER_WIDTH:Number = 1;			// Tab Divider witth

				// Mouse
				private const HLSM:String = "HeaderGlinkMouseOut";
				private const HLMOVER:String = "HeaderGlinkSelect";
				private const HLS:String = "HeaderGlinkSelect";
				private const HLMOUT:String = "HeaderGlinkMouseOut";
				private const STYLE:String = "HeaderGlinkStyle";
				private const MCR:String = "MenuController";
				
				public var model:* = GlobalsVO.getGlobal(GlobalsVO.DATA_MODEL);
				public var hash:* = model.metaData.hash;
				
				public function init():void {
					
		   			this._mcr = GlobalsVO.getGlobal(MCR);

					// Get Header Data
					arr = GlobalsVO.getGlobal(GlobalsVO.DATA_MODEL).getHeaderData(GlobalsVO.GLINKS,!this._isAdmin,this._isAdmin);
					
					// Set gap per glink
					gLinksGap = Number(GlobalsVO.getCSSProperty("headerGlinksGap"));
					
					// Container padding right
					gLinksPadR = Number(GlobalsVO.getCSSProperty("headerGlinksPadR"));
					
					
					gLinksY = Number(GlobalsVO.getCSSProperty("headerGlinksY"));
					
					// Build new header links
					buildHeaderGLinks();
					
				}
				
				
				
				/**
				 * @private
				 * Add a new Vbox container to hold the glinks data
				 * @param x:Number - X position
				 * @param y:Number - Y position
				 * @param target:* - Target where to place the Vbox container
				 */
				 
				private function addVBox(target:*):VBox {
					var vb:VBox = new VBox();
					vb.styleName = STYLE;
					vb.verticalScrollPolicy = "off";
					vb.horizontalScrollPolicy = "off";
					glinkcontainer.addChild(vb);
					GlobalsVO.setStyle(vb);
					return vb;
				}
				
				
				private function onResize():void {
					this.x = this.parent.width - this.width;
				}
				
				public function buildHeaderGLinks():void {
					
					/* Create two new vbox's to hold
					 * the glinks */
					var vb1:VBox = addVBox(this);
					var vb2:VBox = addVBox(this);
					
					var model:Menu_Model = GlobalsVO.getGlobal(GlobalsVO.DATA_MODEL);
					var ar:Array = model.headerData.data.gLinks[model.headerData.name];

					var l:*;
					/* Iterate through the array of objects
					 * and setup the line of business tabs */
					for(lobCount=0; lobCount<arr.length;++lobCount) {
						if (this._isAdmin) {
							l = GlobalLinks.build_editable_label(this,ar,arr,lobCount,DEFAULT_STYLE,this.onMouse,null);
						} else {
							l = GlobalLinks.build_label(this,arr,lobCount,DEFAULT_STYLE,this.onMouse);
						}
						GlobalsVO.setStyle(l);
						
						// Add the new tabContainer to the main container
						if(lobCount<3) {
							vb1.addChild(l);
						} else {
							vb2.addChild(l);
						}
						
						if(GlobalsVO.DEVMODE) new ErrorMessages(l, arr[lobCount].value+" , "+arr[lobCount].target);
						// Set focus listener and it's tab priority
						GlobalsVO.addFocus(l,_tabOrder++);
					}
					
					lobCount++;
				}
				
				
				
				
				
				/**
				 * Accessibility, get the current selected
				 * instance from this class
				 * @see Accessibility_Model:talk()
				 */
				 
				public function getDataByAccessibility(instance:*):Object {
					for(var i:int = 0; i<arr.length; ++i) {
						if(instance.name.toString() == arr[i].component.name.toString()) {
//							trace("\nglinks name: "+arr[i].name);
//							trace("glinks value: "+arr[i].value);
							return arr[i];
						}
					}
					
					return null;
				}				
				
				
				
				
				
				/**
				 * Check the array with the current
				 * selected component to see if the
				 * component should be styled differently
				 * @param:MouseEvent - Any mouse event
				 */
				private function onMouse(e:MouseEvent):void {
					
					var i:int=0;
					switch(e.type) {
						
						case MouseEvent.MOUSE_OVER :
							for(; i<arr.length; ++i) { 
								if(arr[i].component == e.currentTarget) {
									onHighlight(_currentSelect = arr[i],e);
								}
							}
									
						break;
						
						
						case MouseEvent.MOUSE_OUT :
							for(; i<arr.length; ++i)  
								if(arr[i].component == e.currentTarget)
									onHighlight(arr[i],e);
									
						break;
						
						case MouseEvent.CLICK :
						
							if (!_isAdmin) {
								try {
									for(var c:int = 0; c < arr.length; ++c) {
										if(e.currentTarget.toString() == arr[c].component.toString()) {
											WebServices.navigateToUrl(arr[c].value,arr[c].target);						
										}
									}
								} catch (err:Error) {}
							}
							
						break;
					}
				}
				
				
				
				
				/**
				 * Based on the component match, determine
				 * if the component should be styled differently
				 */
				 
				private function onHighlight(item:Object,e:MouseEvent):void {
					switch(e.type) {
						case MouseEvent.MOUSE_OVER:
							item.useHandCursor = true;
							item.mode == MODE ? item.label.styleName = HLSM : item.label.styleName = HLMOVER;
							GlobalsVO.setStyle(item.label);
						break;
						case MouseEvent.MOUSE_OUT:
							item.mode == MODE ? item.label.styleName = HLS : item.label.styleName = HLMOUT;
							GlobalsVO.setStyle(item.label);
						break;
					}
				}
			]]>
	</mx:Script>
		
</mx:Canvas>
