<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	resize="onResize()"
	creationComplete="onCreationComplete()"
	>
	<mx:states>
		<mx:State name="RegisterUserState">
			<mx:RemoveChild target="{btn_Login}"/>
			<mx:SetProperty target="{panel_Login}" name="title" value="Register"/>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Click to Login as a Registered User" id="btn_cancelRegister" click="onClickCancelRegisterButton()"/>
			</mx:AddChild>
			<mx:SetProperty target="{spacer2}" name="width" value="40"/>
			<mx:AddChild relativeTo="{hbox2a}" position="firstChild">
				<mx:HBox width="100%">
					<mx:Label text="Repeat Password:" styleName="Labels"/>
					<mx:TextInput id="txt_Password2" displayAsPassword="true" change="onChangePassword2()" focusOut="onFocusOutPassword2()" maxChars="{this._passwordMaxLength}" creationComplete="txt_Password2_creationCompleteHandler(event)"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{this.vbox0}" position="firstChild">
				<mx:HBox width="100%" id="hbox_fullName">
					<mx:Label text="Full Name:" styleName="Labels"/>
					<mx:Spacer width="35"/>
					<mx:TextInput id="txt_fullName" width="200" maxChars="40"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty target="{this.btn_Register}" name="label" value="Register as New User"/>
		</mx:State>
		<mx:State name="SimpleRegisterUserState" basedOn="RegisterUserState">
			<mx:RemoveChild target="{this.hbox_fullName}"/>
			<mx:SetProperty target="{panel_Login}" name="title" value="{this._title_panel}"/>
			<mx:RemoveChild target="{this.btn_cancelRegister}"/>
			<mx:RemoveChild target="{this.btn_Register}"/>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Submit Registration Details" id="btn_Register" click="onClickRegisterButton()"/>
			</mx:AddChild>
			<mx:SetProperty target="{this.btn_Register}" name="enabled" value="false"/>
		</mx:State>
		<mx:State name="SimplePasswordChangeState" basedOn="SimpleRegisterUserState">
			<mx:SetProperty target="{btn_Register}" name="label" value="Submit New Password"/>
		</mx:State>
		<mx:State name="ActivateUserFromLogin">
			<mx:RemoveChild target="{this.hbox_password1}"/>
			<mx:RemoveChild target="{this.btn_Login}"/>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Submit Activation Code" id="btn_Activate" click="onClickActivateButton()"/>
			</mx:AddChild>
			<mx:SetProperty target="{this.btn_Activate}" name="enabled" value="false"/>
			<mx:AddChild relativeTo="{hbox2a}" position="firstChild">
				<mx:HBox width="100%">
					<mx:Label id="lbl_activationCode" text="Activation Code:" styleName="Labels"/>
					<mx:TextInput id="txt_activationCode" width="{this.width - this.lbl_activationCode.width - 35}" creationComplete="onCreationCompleteActivationKey()" change="onChangeActivationKey()" focusIn="onFocusInActivationKey()" focusOut="onFocusOutActivationKey(event)" maxChars="{this._activationKeyMaxLength}"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		<mx:State name="ResendActivateFromLogin">
			<mx:RemoveChild target="{this.hbox_password1}"/>
			<mx:RemoveChild target="{this.btn_Login}"/>
			<mx:AddChild relativeTo="{hbox1}" position="lastChild">
				<mx:Button label="Resend Activation Code" id="btn_ResendActivation" click="onClickResendActivationButton()"/>
			</mx:AddChild>
			<mx:SetProperty target="{this.btn_ResendActivation}" name="enabled" value="false"/>
		</mx:State>
	</mx:states>
	<mx:Style>
		.Labels {
			color: #0000ff;
			fontFamily: Verdana;
			fontSize: 11;
			fontWeight: bold;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import com.ErrorTipManager;
			import com.PasswordChecker;
			import com.URLUtils;
			
			import controls.Alert.AlertPopUp;
			import controls.login.events.ActivationCompletedEvent;
			import controls.login.events.ChangePasswordEvent;
			import controls.login.events.LoginCompletedEvent;
			import controls.login.events.LoginRequestedEvent;
			import controls.login.events.RegisterCompletedEvent;
			import controls.login.events.RegisterRequestedEvent;
			import controls.login.events.ResendActivationEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ValidationResultEvent;

			[Event(name="loginRequested",type="vyperlogix.controls.login.events.LoginRequestedEvent")]
			[Event(name="registerRequested",type="vyperlogix.controls.login.events.RegisterRequestedEvent")]
			[Event(name="registerCompleted",type="vyperlogix.controls.login.events.RegisterCompletedEvent")]
			[Event(name="loginCompleted",type="vyperlogix.controls.login.events.LoginCompletedEvent")]
			[Event(name="activationCompleted",type="vyperlogix.controls.login.events.ActivationCompletedEvent")]
			[Event(name="resendActivation",type="vyperlogix.controls.login.events.ResendActivationEvent")]
			[Event(name="changePassword",type="vyperlogix.controls.login.events.ChangePasswordEvent")]
			
			[Bindable]
			private var __isRegisterState:Boolean = false;

			private var __isNewlyRegisterState:Object = {};
			
			[Bindable]
			public var buttonIcon:Class;

			[Bindable]
			public var _buttonIcon:Class;

			[Bindable]
			private var _url:String;
			
			[Bindable]
			private var _userNameTooShortErrorMessage:String = "This string is shorter than the minimum allowed length of 4.";
			
			[Bindable]
			private var _userNameTooLongErrorMessage:String = "This string is longer than the maximum allowed length of 32.";
			
			[Bindable]
			private var _userNameRequiredFieldError:String = "This is a Required Field that cannot be left blank or have less than 4 nor more than 32 characters.";

			[Bindable]
			private var _activationKeyTooShortErrorMessage:String = "The activation key is shorter than the minimum allowed length.";

			[Bindable]
			private var _activationKeyTooLongErrorMessage:String = "The activation key is longer than the maximum allowed length.";

			[Bindable]
			private var _userNameMinLength:int = 4;
			
			[Bindable]
			private var _userNameMaxLength:int = 128;
			
			[Bindable]
			private var _activationKeyMinLength:int = 4;
			
			[Bindable]
			private var _activationKeyMaxLength:int = 128;
			
			[Bindable]
			private var _domainMinLength:int = 1;
			
			[Bindable]
			private var _domainMaxLength:int = 128;
			
			[Bindable]
			private var _domainRequiredFieldError:String = "This is a Required Field that cannot be left blank or have less than 1 nor more than 128 characters.";
			
			[Bindable]
			private var _domainTooLongErrorMessage:String = "This string is longer than the maximum allowed length of 128.";
			
			[Bindable]
			private var _domainTooShortErrorMessage:String = "This string is shorter than the minimum allowed length of 1.";
			
			[Bindable]
			private var _passwordTooShortErrorMessage:String = "This string is shorter than the minimum allowed length of 4.";
			
			[Bindable]
			private var _passwordTooLongErrorMessage:String = "This string is longer than the maximum allowed length of 32.";
			
			[Bindable]
			private var _passwordRequiredFieldError:String = "This is a Required Field that cannot be left blank or have less than 4 nor more than 32 characters.";
			
			[Bindable]
			private var _activationKeyRequiredFieldError:String = "This is a Required Field that cannot be left blank or have the wrong number of characters.";
			
			[Bindable]
			private var _passwordMinLength:int = 4;
			
			[Bindable]
			private var _passwordMaxLength:int = 32;

			[Bindable]
			private var _isUseInternalRegisterForm:Boolean = true;
			
			[Bindable]
			private var _passwordMatchedFieldError:String = "The Password entered as the Repeated Password does not match the first Password entered.";
			
			[Bindable]
			private var _lbl_UserName_text:String = '';
			
			[Bindable]
			private var _lbl_Domain_text:String = '';
			
			[Bindable]
			private var _lbl_Password_text:String = '';
			
			[Bindable]
			private var _title_panel:String = '';
			
			public static var WEAK_PASSWORD:String = 'Weak';
			public static var MEDIUM_PASSWORD:String = 'Medium';
			public static var STRONG_PASSWORD:String = 'Strong';
			
			[Bindable]
			private var _minimum_Password_strength:String = LoginCanvas.MEDIUM_PASSWORD;
			
			private var stackWindowMetrics:Array = new Array();
			
			[Bindable]
			private var __text_width:Number = 0;
			
			private const __text_width_multiplier:Number = 0.9;
			
			private function onCreationComplete():void {
				this.__text_width = ( (this.__text_width_multiplier > 0.0) && (this.__text_width_multiplier < 1.0) ) ? this.width*this.__text_width_multiplier : this.width;
				ErrorTipManager.registerValidator(this.UserNameValidator);
				ErrorTipManager.registerValidator(this.PasswordValidator);
				ErrorTipManager.registerValidator(this.ActivationKeyValidator);
				ErrorTipManager.registerValidator(this.PasswordValidator2);

				this.txt_UserName.setFocus();
			}
			
			private function newWindowMetricsModel():Object {
				var obj:Object = new Object();
				obj.state = "";
				obj.width = -1;
				obj.height = -1;
				return obj;
			}
			
			public function set minimum_Password_strength(minimum_Password_strength:String):void {
				this._minimum_Password_strength = minimum_Password_strength;
			}

			public function get minimum_Password_strength():String {
				return this._minimum_Password_strength;
			}
			
			public function set lbl_UserName_text(lbl_UserName_text:String):void {
				this._lbl_UserName_text = lbl_UserName_text;
			}

			public function get lbl_UserName_text():String {
				return this._lbl_UserName_text;
			}
			
			public function set lbl_Password_text(lbl_Password_text:String):void {
				this._lbl_Password_text = lbl_Password_text;
			}

			public function get lbl_Password_text():String {
				return this._lbl_Password_text;
			}
			
			public function set passwordMatchedFieldError(aMessage:String):void {
				this._passwordMatchedFieldError = aMessage;
			}

			[Inspectable]
			public function get passwordMatchedFieldError():String {
				return this._passwordMatchedFieldError;
			}

			public function set isUseInternalRegisterForm(aBool:Boolean):void {
				this._isUseInternalRegisterForm = aBool;
			}

			[Inspectable]
			public function get isUseInternalRegisterForm():Boolean {
				return this._isUseInternalRegisterForm;
			}

			public function set passwordRequiredFieldError(aMessage:String):void {
				this._passwordRequiredFieldError = aMessage;
			}

			[Inspectable]
			public function get passwordRequiredFieldError():String {
				return this._passwordRequiredFieldError;
			}

			public function set passwordMaxLength(maxLength:int):void {
				this._passwordMaxLength = maxLength;
			}

			[Inspectable]
			public function get passwordMaxLength():int {
				return this._passwordMaxLength;
			}

			public function set passwordMinLength(minLength:int):void {
				this._passwordMinLength = minLength;
			}

			[Inspectable]
			public function get passwordMinLength():int {
				return this._passwordMinLength;
			}

			public function set passwordTooShortErrorMessage(aMessage:String):void {
				this._passwordTooShortErrorMessage = aMessage;
			}

			[Inspectable]
			public function get passwordTooShortErrorMessage():String {
				return this._passwordTooShortErrorMessage;
			}

			public function set passwordTooLongErrorMessage(aMessage:String):void {
				this._passwordTooLongErrorMessage = aMessage;
			}

			[Inspectable]
			public function get passwordTooLongErrorMessage():String {
				return this._passwordTooLongErrorMessage;
			}

			public function set userNameRequiredFieldError(aMessage:String):void {
				this._userNameRequiredFieldError = aMessage;
			}

			[Inspectable]
			public function get userNameRequiredFieldError():String {
				return this._userNameRequiredFieldError;
			}

			public function set userNameMaxLength(maxLength:int):void {
				this._userNameMaxLength = maxLength;
			}

			[Inspectable]
			public function get userNameMaxLength():int {
				return this._userNameMaxLength;
			}

			public function set userNameMinLength(minLength:int):void {
				this._userNameMinLength = minLength;
			}

			[Inspectable]
			public function get userNameMinLength():int {
				return this._userNameMinLength;
			}

			public function set userNameTooShortErrorMessage(aMessage:String):void {
				this._userNameTooShortErrorMessage = aMessage;
			}

			[Inspectable]
			public function get userNameTooShortErrorMessage():String {
				return this._userNameTooShortErrorMessage;
			}

			public function set userNameTooLongErrorMessage(aMessage:String):void {
				this._userNameTooLongErrorMessage = aMessage;
			}

			[Inspectable]
			public function get userNameTooLongErrorMessage():String {
				return this._userNameTooLongErrorMessage;
			}
			
			[Inspectable]
			public function get title_panel():String {
				var toks:Array = this._title_panel.split(' :: ');
				trace(this.className+'.title_panel.1 (get) --> toks[0]='+toks[0]);
				return toks[0];
			}
			
			public function set title_panel(title_panel:String):void {
				var toks:Array = this._title_panel.split(' :: ');
				this._title_panel = title_panel;
				trace(this.className+'.title_panel.1 (set) --> this._title_panel='+this._title_panel);
				this.panel_Login.title = this._title_panel;
			}

			public function set url(aUrl:String):void {
				this._url = aUrl;
			}

			[Inspectable]
			public function get url():String {
				return this._url;
			}

			private function analyzePasswordStrength(sPwd:String):void {
				var pwdChecker:PasswordChecker = new PasswordChecker();
				if (pwdChecker.isStrongPassword(sPwd)) {
					label_PasswordStrength.text = LoginCanvas.STRONG_PASSWORD;
				} else if (pwdChecker.isMediumPassword(sPwd)) {
					label_PasswordStrength.text = LoginCanvas.MEDIUM_PASSWORD;
				} else {
					label_PasswordStrength.text = LoginCanvas.WEAK_PASSWORD;
				}
			}

            private function validatePassword():void {       
                var vResult:ValidationResultEvent = PasswordValidator.validate();
				var btn:Button = this.current_button;
                if (vResult.type==ValidationResultEvent.INVALID) {
                	btn.enabled = false;
                    return;
                } else {
                	var isMinPasswordOrBetter:Boolean = (this.label_PasswordStrength.text == this.minimum_Password_strength);
                	var bool:Boolean = isMinPasswordOrBetter;
                	trace(this.className+'.validatePassword().2 --> bool='+bool);
                	try {
						trace(this.className+'.validatePassword().3 --> this.btn_Register.visible='+this.btn_Register.visible);
						trace(this.className+'.validatePassword().4 --> this.currentState='+this.currentState);
	                	if ( (this.currentState == 'SimpleRegisterUserState') || (this.currentState == 'RegisterUserState') ) {
	                		bool = (this.txt_Password.text == this.txt_Password2.text) && (isMinPasswordOrBetter);
	                	}
                	} catch (err:Error) { }
                	trace(this.className+'.validatePassword().5 --> bool='+bool);
                	btn.enabled = bool;
                	this.txt_Password.errorString = (isMinPasswordOrBetter) ? ((bool) ? "" : this._passwordMatchedFieldError) : 'Your password does not meet the minimum requirement of "'+this._minimum_Password_strength+'".  Please ensure your password meets or beats this minimum requirement.';
                }
            }

            private function validatePassword2():void {
            	this.validatePassword();
                var vResult:ValidationResultEvent = PasswordValidator2.validate();                
                if (vResult.type==ValidationResultEvent.INVALID) {
                	this.btn_Register.enabled = false;
                    return;
                } else {
                	if (this.txt_Password.text == this.txt_Password2.text) {
	                	this.btn_Register.enabled = true;
	                	try {
	                		this.txt_Password2.errorString = "";
	                	} catch (err:Error) { }
                	} else {
                		this.txt_Password2.errorString = this._passwordMatchedFieldError;
	                	this.btn_Register.enabled = false;
                	}
                }
            }

			private function onChangePassword():void {
				analyzePasswordStrength(txt_Password.text);
				validatePassword();
			}

			private function onChangePassword2():void {
				validatePassword2();
			}

			private function get current_button():Button {
				return ((this.currentState == 'SimpleRegisterUserState') ? this.btn_Register : ((this.currentState == 'ActivateUserFromLogin') ? this.btn_Activate : ((this.currentState == 'ResendActivateFromLogin') ? this.btn_ResendActivation : this.btn_Login)));
			}
			
            private function validateUserName():void {
				trace(this.className+'.validateUserName().1 --> this.currentState='+this.currentState);
                var vResult:ValidationResultEvent = UserNameValidator.validate();
				var btn:Button = this.current_button;
                if (vResult.type==ValidationResultEvent.INVALID) {
                	btn.enabled = false;
                    return;
                } else {
                	btn.enabled = true;
                }
            }

			private function validateActivationKey():void {
				trace(this.className+'.validateActivationKey().1 --> this.currentState='+this.currentState);
				var vResult:ValidationResultEvent = this.ActivationKeyValidator.validate();
				var btn:Button = this.btn_Activate;                
				if (vResult.type==ValidationResultEvent.INVALID) {
					btn.enabled = false;
					return;
				} else {
					btn.enabled = true;
				}
			}
			
			private function onClickUserName():void {
				//txt_UserName.text = '';
			}
			
			private function onFocusOutUserName(event:FocusEvent):void {
				if (!(event.relatedObject is Button)) {
					trace(this.className+'.onFocusOutUserName() !');
					this.lbl_UserName.visible = this.lbl_UserName.includeInLayout = false;
					validateUserName();
				}
			}
			
			private function onFocusOutActivationKey(event:FocusEvent):void {
				if (!(event.relatedObject is Button)) {
					trace(this.className+'.onFocusOutActivationKey() !');
					this.validateActivationKey();
				}
			}
			
			private function onFocusInUserName():void {
				this.lbl_UserName.visible = this.lbl_UserName.includeInLayout = true;
			}
			
			private function onFocusInActivationKey():void {
			}
			
			private function onChangeUserName():void {
				validateUserName();
			}
			
			private function onChangeActivationKey():void {
				this.validateActivationKey();
			}
			
			private function onFocusOutPassword2():void {
				validatePassword2();
			}

			private function onFocusOutPassword(event:FocusEvent):void {
				if (!(event.relatedObject is Button)) {
					this.lbl_Password.visible = this.lbl_Password.includeInLayout = false;
					validatePassword();
				}
			}
			
			private function onFocusInPassword():void {
				this.lbl_Password.visible = this.lbl_Password.includeInLayout = ( (this._lbl_Password_text is String) && (this._lbl_Password_text.length > 0) );
			}
			
			private function onClickLoginButton():void {
				this.dispatchEvent(new LoginRequestedEvent(LoginRequestedEvent.TYPE_LOGIN_REQUESTED, '', this.txt_UserName.text, this.txt_Password.text));
			}
			
			private function clearLoginState():void {
				this.txt_UserName.text = '';
				this.txt_Password.text = '';
				this.errorString = '';
				this.lbl_UserName.visible = this.lbl_UserName.includeInLayout = false;
				this.lbl_Password.visible = this.lbl_Password.includeInLayout = false;
				ErrorTipManager.hideErrorTip(this.txt_UserName,true);
				ErrorTipManager.hideErrorTip(this.txt_Password,true);
			}
			
			private function onClickRegisterButton():void {
				<mx:SetProperty target="{btn_Register}" name="click" value="onClickChangePasswordButton()"/>
				if (this.currentState == 'SimpleRegisterUserState') {
					trace(this.className+'.onClickRegisterButton().1 !');
				} else if (this.currentState == 'SimplePasswordChangeState') {
					trace(this.className+'.onClickRegisterButton().ChangePassword.1 !');
				} else {
					AlertPopUp.surpriseNoOkay('Cannot Process your request at this time...','ERROR');
				}
				var datum:Object = new Object();
				datum.username = this.txt_UserName.text;
				datum.password = this.txt_Password.text;
				datum.password2 = this.txt_Password2.text;
				datum.fullname = this.txt_fullName.text;
				if (this.currentState == 'SimpleRegisterUserState') {
					trace(this.className+'.onClickRegisterButton().2 --> RegisterCompletedEvent.TYPE_REGISTER_COMPLETED !!');
					this.dispatchEvent(new RegisterCompletedEvent(RegisterCompletedEvent.TYPE_REGISTER_COMPLETED, datum));
				} else if (this.currentState == 'SimplePasswordChangeState') {
					trace(this.className+'.onClickRegisterButton().ChangePassword.2 --> ChangePasswordEvent.TYPE_CHANGE_PASSWORD !!');
					this.dispatchEvent(new ChangePasswordEvent(ChangePasswordEvent.TYPE_CHANGE_PASSWORD, datum));
				} else {
					AlertPopUp.surpriseNoOkay('Cannot Process your request at this time...','ERROR');
				}
			}
			
			private function onClickActivateButton():void {
				trace(this.className+'.onClickActivateButton().1 !');
				var datum:Object = new Object();
				datum.username = this.txt_UserName.text;
				datum.activation_key = this.txt_activationCode.text;
				trace(this.className+'.onClickActivateButton().2 --> RegisterCompletedEvent.TYPE_REGISTER_COMPLETED !!');
				this.dispatchEvent(new ActivationCompletedEvent(ActivationCompletedEvent.TYPE_ACTIVATION_COMPLETED, datum));
			}

			private function onClickResendActivationButton():void {
				trace(this.className+'.onClickResendActivationButton().1 !');
				var datum:Object = new Object();
				datum.username = this.txt_UserName.text;
				trace(this.className+'.onClickResendActivationButton().2 --> RegisterCompletedEvent.TYPE_REGISTER_COMPLETED !!');
				this.dispatchEvent(new ResendActivationEvent(ResendActivationEvent.TYPE_RESEND_ACTIVATION, datum));
			}

			private function clearRegisterState():void {
				this.txt_Password2.text = '';
				ErrorTipManager.hideErrorTip(this.txt_Password2,true);
			}
			
			private function onClickCancelRegisterButton():void {
				var oModel:Object = this.stackWindowMetrics.pop();
				if (oModel is Object) {
					this.clearLoginState();
					this.clearRegisterState();
					this.currentState = oModel.state;
					this.__isRegisterState = false;
					this.width = oModel.width;
					this.height = oModel.height;
					this.txt_UserName.text = "";
					this.txt_Password.text = "";
	            	try {
	            		this.btn_Register.enabled = true;
	            	} catch (err:Error) { }
				}
			}
			
			private function onResize():void {
				if (this.width < 400) {
					this.width = 400;
				}
				if (this.height < 160) {
					this.height = 160;
				}
			}

			private function onCreationCompleteUserName():void {
				this.txt_UserName.setFocus();
				trace(this.className+'.onCreationCompleteUserName().1 --> this.__isNewlyRegisterState['+this.txt_UserName.id+']='+this.__isNewlyRegisterState[this.txt_UserName.id]);
				if (this.__isNewlyRegisterState[this.txt_UserName.id]) {
					ErrorTipManager.hideErrorTip(this.txt_UserName,true);
					this.__isNewlyRegisterState[this.txt_UserName.id] = false;
					trace(this.className+'.onCreationCompleteUserName().2 --> this.__isNewlyRegisterState['+this.txt_UserName.id+']='+this.__isNewlyRegisterState[this.txt_UserName.id]);
				}
			}

			protected function txt_Password_creationCompleteHandler(event:FlexEvent):void {
				trace(this.className+'.txt_Password_creationCompleteHandler().1 --> this.__isNewlyRegisterState['+event.currentTarget.id+']='+this.__isNewlyRegisterState[event.currentTarget.id]);
				if (this.__isNewlyRegisterState[event.currentTarget.id]) {
					ErrorTipManager.hideErrorTip(event.currentTarget,true);
					this.__isNewlyRegisterState[event.currentTarget.id] = false;
					trace(this.className+'.txt_Password_creationCompleteHandler().2 --> this.__isNewlyRegisterState['+event.currentTarget.id+']='+this.__isNewlyRegisterState[event.currentTarget.id]);
				}
			}

			private function onCreationCompleteActivationKey():void {
				this.txt_activationCode.setFocus();
				ErrorTipManager.hideErrorTip(this.txt_activationCode,true);
			}
			

			protected function txt_Password2_creationCompleteHandler(event:FlexEvent):void {
				trace(this.className+'.txt_Password2_creationCompleteHandler().1 --> this.__isNewlyRegisterState['+event.currentTarget.id+']='+this.__isNewlyRegisterState[event.currentTarget.id]);
				if (this.__isNewlyRegisterState[event.currentTarget.id]) {
					ErrorTipManager.hideErrorTip(event.currentTarget,true);
					this.__isNewlyRegisterState[event.currentTarget.id] = false;
					trace(this.className+'.txt_Password2_creationCompleteHandler().2 --> this.__isNewlyRegisterState['+event.currentTarget.id+']='+this.__isNewlyRegisterState[event.currentTarget.id]);
				}
			}

			private function clear_error_tips():void {
				//try { this.txt_UserName.text = ''; } catch (err:Error) {}
				ErrorTipManager.hideErrorTip(this.txt_UserName,true);
				try { this.txt_Password.text = ''; } catch (err:Error) {}
				ErrorTipManager.hideErrorTip(this.txt_Password,true);
				try { this.txt_Password2.text = ''; } catch (err:Error) {}
				ErrorTipManager.hideErrorTip(this.txt_Password2,true);
				try { this.txt_activationCode.text = ''; } catch (err:Error) {}
				ErrorTipManager.hideErrorTip(this.txt_activationCode,true);
			}

			protected function tabnavigator1_changeHandler(event:IndexChangedEvent):void {
				var nav:TabNavigator = TabNavigator(event.currentTarget);
				var children:Array = nav.getChildren();
				var g_children:Array;
				var aChildSource:Canvas;
				var aChildDest:Canvas;
				function copy_children(_from:int,_to:int):void {
					aChildSource = children[_from];
					g_children = aChildSource.getChildren();
					if (g_children.length > 0) {
						aChildSource.removeChildAt(0);
						aChildDest = children[_to];
						aChildDest.addChild(g_children[0]);
					}
				}
				var i_Login:int = 0;
				var i_Register:int = 1;
				var i_Activate:int = 2;
				var i_ResendActivation:int = 3;
				var i_ChangePassword:int = 4;
				trace(this.className+'.tabnavigator1_changeHandler().1 --> oldIndex='+event.oldIndex+', newIndex='+event.newIndex);
				if (event.newIndex == i_Register) {
					copy_children(event.oldIndex,event.newIndex);
					this.currentState = 'SimpleRegisterUserState';
				} else if (event.newIndex == i_Login) {
					copy_children(event.oldIndex,event.newIndex);
					this.currentState = null;
				} else if (event.newIndex == i_Activate) {
					copy_children(event.oldIndex,event.newIndex);
					this.currentState = 'ActivateUserFromLogin';
				} else if (event.newIndex == i_ResendActivation) {
					copy_children(event.oldIndex,event.newIndex);
					this.currentState = 'ResendActivateFromLogin';
				} else if (event.newIndex == i_ChangePassword) {
					copy_children(event.oldIndex,event.newIndex);
					this.currentState = 'SimplePasswordChangeState';
				}
				this.txt_UserName.setFocus();
				this.clear_error_tips();
				var btn:Button = this.current_button;
				btn.enabled = false;
				if (event.newIndex == i_ResendActivation) {
					this.validateUserName();
				} else if (event.newIndex == i_Activate) {
					this.validateUserName();
					this.validateActivationKey();
				} else if ( (event.newIndex == i_Login) || (event.newIndex == i_Register) || (event.newIndex == i_ChangePassword) ) {
					this.validateUserName();
					this.validatePassword();
				}
			}

			public function set control_bar_message(message:String):void {
				if ( (message is String) && (message.length > 0) ) {
					this.controlBar_messages.text = message;
					this.controlBar.visible = this.controlBar.includeInLayout = true;
				} else {
					this.controlBar.visible = this.controlBar.includeInLayout = false;
				}
			} 
		]]>
	</mx:Script>
	<mx:EmailValidator id="UserNameValidator" source="{txt_UserName}" property="text"
					   requiredFieldError="{this._userNameRequiredFieldError}" required="true" trigger="{btn_Login}" triggerEvent="click"/>
    <mx:StringValidator id="PasswordValidator" source="{txt_Password}" property="text" 
						tooShortError="{this._passwordTooShortErrorMessage}" 
						tooLongError="{this._passwordTooLongErrorMessage}" 
						minLength="{this._passwordMinLength}" maxLength="{this._passwordMaxLength}" 
						requiredFieldError="{this._passwordRequiredFieldError}" 
						required="true"
						trigger="{btn_Login}" triggerEvent="click" 
    />
    <mx:StringValidator id="PasswordValidator2" source="{txt_Password2}" property="text" 
						tooShortError="{this._passwordTooShortErrorMessage}" 
						tooLongError="{this._passwordTooLongErrorMessage}" 
						minLength="{this._passwordMinLength}" maxLength="{this._passwordMaxLength}" 
						requiredFieldError="{this._passwordRequiredFieldError}" 
						required="true"
						trigger="{btn_Register}" triggerEvent="click" 
    />
	<mx:StringValidator id="ActivationKeyValidator" source="{this.txt_activationCode}" property="text" 
						tooShortError="{this._activationKeyTooShortErrorMessage}" 
						tooLongError="{this._activationKeyTooLongErrorMessage}" 
						minLength="{this._activationKeyMinLength}" maxLength="{this._activationKeyMaxLength}" 
						requiredFieldError="{this._activationKeyRequiredFieldError}" 
						required="true"
						trigger="{this.btn_Activate}" triggerEvent="click" 
						/>
	<mx:VBox width="100%" height="100%" horizontalAlign="left" verticalAlign="top">
		<mx:Panel id="panel_Login" width="100%" height="100%" layout="absolute" title="Login" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:TabNavigator width="100%" height="100%" change="tabnavigator1_changeHandler(event)">
				<mx:Canvas label="Login" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
					<mx:VBox id="vbox0" height="100%" width="100%" paddingLeft="10" paddingTop="20" verticalAlign="top">
						<mx:HBox width="100%">
							<mx:Label id="prompt_userName" text="Internet Email Address:" styleName="Labels"/>
							<mx:VBox width="100%">
								<mx:HBox width="100%" horizontalAlign="left">
									<mx:TextInput id="txt_UserName" editable="true" width="80%" creationComplete="onCreationCompleteUserName()" click="onClickUserName()" change="onChangeUserName()" focusIn="onFocusInUserName()" focusOut="onFocusOutUserName(event)" maxChars="{this._userNameMaxLength}"/>
								</mx:HBox>
								<mx:Text id="lbl_UserName" text="{this._lbl_UserName_text}" width="{this.__text_width - 80}" visible="false" includeInLayout="false" selectable="false" styleName="AttentionLabel"/>
							</mx:VBox>
						</mx:HBox>
						<mx:HBox width="100%">
							<mx:VBox height="100%" id="vbox1">
								<mx:HBox id="hbox_password1" width="100%">
									<mx:Label text="Password:" styleName="Labels" id="label1"/>
									<mx:Spacer width="2" id="spacer2"/>
									<mx:VBox id="vbox_password1" width="100%">
										<mx:HBox width="100%">
											<mx:TextInput id="txt_Password" editable="true" displayAsPassword="true" change="onChangePassword()" focusIn="onFocusInPassword()" focusOut="onFocusOutPassword(event)" maxChars="{this._passwordMaxLength}" creationComplete="txt_Password_creationCompleteHandler(event)"/>
											<mx:Label text="{(this.label_PasswordStrength.text.length > 0) ? 'Your password stength is: ' : ''}" styleName="Labels"/>
											<mx:Label text="" id="label_PasswordStrength" styleName="Labels"/>
										</mx:HBox>
										<mx:Text id="lbl_Password" text="{this._lbl_Password_text}" width="{this.__text_width - 80}" visible="false" includeInLayout="false" selectable="false" styleName="AttentionLabel"/>
									</mx:VBox>
								</mx:HBox>
								<mx:VBox width="100%" height="100%" id="hbox2a">
								</mx:VBox>
							</mx:VBox>
						</mx:HBox>
						<mx:HBox width="100%" id="hbox1">
							<mx:Spacer width="20" id="spacer1"/>
							<mx:Button label="Login" id="btn_Login" enabled="false" click="onClickLoginButton()"/>
						</mx:HBox>
					</mx:VBox>
				</mx:Canvas>
				<mx:Canvas label="Register" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				</mx:Canvas>
				<mx:Canvas label="Activate" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				</mx:Canvas>
				<mx:Canvas label="Resend Activation" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				</mx:Canvas>
				<mx:Canvas label="Change Password" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				</mx:Canvas>
			</mx:TabNavigator>
			<mx:ControlBar id="controlBar" width="100%" height="100%" visible="false" includeInLayout="false">
				<mx:TextArea id="controlBar_messages" width="100%" height="100%" minHeight="60" editable="false"/>
			</mx:ControlBar>
		</mx:Panel>
	</mx:VBox>
</mx:Canvas>
