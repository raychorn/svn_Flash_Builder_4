<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   width="100%" height="100%" 
		   resize="canvas1_resizeHandler(event)" 
		   creationComplete="canvas1_creationCompleteHandler(event)" 
		   xmlns:videos="controls.videos.*">
	<fx:Script>
		<![CDATA[
			import com.DebuggerUtils;
			import com.EzHTTPService;
			import com.ObjectExplainer;
			import com.StringUtils;
			
			import controls.Alert.AlertPopUp;
			import controls.crm.ReportProblems;
			import controls.login.LoginPanel;
			import controls.login.events.LoginRequestedEvent;
			import controls.videos.YouTubeVideo;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.controls.menuClasses.MenuBarItem;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.events.VideoEvent;
			import mx.formatters.NumberBaseRoundType;
			import mx.formatters.NumberFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TitleWindow;
			
			import splash.events.SplashCompletedEvent;
			
			import utils.APIHelper;
			
			import vyperlogix.LicenseManagement;
			import vyperlogix.events.CompletedUserLoginEvent;
			import vyperlogix.events.RequestedUserLoginEvent;
			import vyperlogix.views.TermsAndConditions;
			import vyperlogix.views.events.TermsAndConditionsAgreementEvent;
			import vyperlogix.views.events.TermsAndConditionsNoAgreementEvent;
			
			public var hang_time_ms:int = 1500;
			
			private var licenseManagement:LicenseManagement;

			private var is_splash_complete:Boolean = false;
			
			public var _align_movie_to_:*;
			
			private function handle_splash_complete():void {
				var _this:SplashMovie = this;
				var _timer:Timer = new Timer(this.hang_time_ms,1);
				_timer.addEventListener(TimerEvent.TIMER_COMPLETE, function (event:TimerEvent):void {
					_timer.stop();
					if (!_this.is_splash_complete) {
						_this.handle_license_management();
						_this.is_splash_complete = true;
					}
				});
				_timer.start();
			}
			
			private function handle_license_management():void {
				var _this:SplashMovie = this;
				if (!this.is_splash_complete) {
					this.licenseManagement = new LicenseManagement();
					this.licenseManagement.addEventListener(FlexEvent.CREATION_COMPLETE, function (event:FlexEvent):void {
						_this.licenseManagement.container = _this;
					});
					var isLoggedIn:Boolean = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
					this.licenseManagement.addEventListener(CompletedUserLoginEvent.TYPE_COMPLETED_USER_LOGIN, 
						function(event:CompletedUserLoginEvent):void {
							var m:Array = _this.menuBar.menuBarItems;
							var mi:MenuBarItem;
							var children:Array;
							var aChild:Object;
							for (var i:String in m) {
								mi = m[i];
								children = mi.data.children;
								for (var ii:String in children) {
									aChild = children[ii];
									aChild.enabled = true;
								}
							}
							isLoggedIn = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
							_this.menuBar.enabled = isLoggedIn;
						}
					);
					var children:Array = this.getChildren();
					var isPresentAlready:Boolean = false;
					for (var i:String in children) {
						if (children[i] is LicenseManagement) {
							isPresentAlready = true;
							break;
						}
					}
					this.addChild(this.licenseManagement);
				}
			}
			
			protected function splash_creationCompleteHandler(event:FlexEvent):void {
				this.handle_splash_complete();
			}

			protected function canvas1_creationCompleteHandler(event:FlexEvent):void {
				var _this:SplashMovie = this;
				this.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void {
					_this.handle_splash_complete();
				});
				FlexGlobals.topLevelApplication.appProxy.addEventListener(RequestedUserLoginEvent.TYPE_REQUESTED_USER_LOGIN, 
					function (event:RequestedUserLoginEvent):void {
					}
				);
				FlexGlobals.topLevelApplication.appProxy.addEventListener(CompletedUserLoginEvent.TYPE_COMPLETED_USER_LOGIN, 
					function (event:CompletedUserLoginEvent):void {
						_this.movie_vbox.setStyle('horizontalAlign',_this.movie_orientation);
						_this.movie_vbox.setStyle('paddingRight',_this.movie_padding_right);
						_this.movie_vbox.setStyle('paddingLeft',_this.movie_padding_left);
					}
				);
				this.movie.visible = this.movie.includeInLayout = false;
				try {
					this.movie.visible = this.movie.includeInLayout = ( (this.parentApplication['how_to_video_id'] is String) && (this.parentApplication['how_to_video_id'].length > 0) );
				} catch (err:Error) {trace(this.className+'.'+DebuggerUtils.getFunctionName(new Error())+'.ERROR --> '+err.toString());}
			}

			protected function canvas1_resizeHandler(event:ResizeEvent):void {
				trace(this.className+'.'+DebuggerUtils.getFunctionName(new Error())+'.1 --> event='+event.toString());
			}

			private function get is_debugging():Boolean {
				return FlexGlobals.topLevelApplication.is_debugging;
			}

			private function get is_localHost():Boolean {
				return FlexGlobals.topLevelApplication.is_localHost;
			}

			private function get domain():String{
				return FlexGlobals.topLevelApplication.domain;
			}
			
			private function onItemClick_menuBar(event:MenuEvent):void {
				var _this:SplashMovie = this;
				var menu:Menu = Menu(event.menu);
				if (event.item['doFunc'] is Function) {
					try {event.item.doFunc(event)} catch (err:Error) {AlertPopUp.surpriseNoOkay(err.toString()+'\n'+err.getStackTrace().substr(0,512),'WARNING onItemClick_menuBar()');}
				} else {
					AlertPopUp.infoNoOkay('Cannot perform the menu action due to some kind of programming problem.', this.className+'.onItemClick_menuBar().1 --> item='+event.item.name);
				}
			}
			
			private function onCreationComplete_menuBar(event:FlexEvent):void {
				var mb:MenuBar = MenuBar(event.currentTarget);
				var ac:ArrayCollection;
				mb.enabled = false;
				if ((mb.dataProvider is ArrayCollection) == false) {
					mb.dataProvider = new ArrayCollection();
				}
				ac = ArrayCollection(mb.dataProvider);

				var i:String;
				var j:String;
				var aSourceMenu:Object;
				var aChild:Object;
				var children:Array;
				for (i in FlexGlobals.topLevelApplication.appProxy.appMenu) {
					aSourceMenu = FlexGlobals.topLevelApplication.appProxy.appMenu[i];
					children = aSourceMenu.children;
					var isEnabled:* = null;
					if (aSourceMenu['enabled'] is Function) {
						try {isEnabled = aSourceMenu['enabled']()} catch (err:Error) {isEnabled = false}
					} else {
						isEnabled = aSourceMenu['enabled'];
					}
					var isOkayToSkipChildren:Boolean = ( (isEnabled is Boolean) && (isEnabled == false) );
					var inheritedEnabled:Boolean = ( (isEnabled is Boolean) && (isEnabled == true) );
					function toggleChild(child:Object):void {
						if ( (child['toggled'] is Boolean) && (child['toggledFunc'] is Function) ) {
							try {child.toggled = child.toggledFunc();} catch (err:Error) {child.toggled = false;}
						}
					}
					for (j in children) {
						aChild = children[j];
						if (isOkayToSkipChildren) {
							aChild.enabled = FlexGlobals.topLevelApplication.appProxy.isLoggedIn && inheritedEnabled;
							toggleChild(aChild);
						} else {
							if (aChild['enabled'] is Boolean) {
								aChild.enabled = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
							} else {
								toggleChild(aChild);
							}
						}
					}
					ac.addItem(aSourceMenu);
				}
			}

			public function popUpTermsAndConditions(info_only:Boolean):void {
				var _this:SplashMovie = this;
				info_only = (info_only is Boolean) ? info_only : false;
				if (!FlexGlobals.topLevelApplication.appProxy.termsPopUp) {
					FlexGlobals.topLevelApplication.appProxy.termsPopUp = PopUpManager.createPopUp(this, TermsAndConditions, true) as TermsAndConditions;
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.x = 10;
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.y = 10;
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.width = this.width - 30;
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.height = this.height- this.menuBar.height - 50;
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.currentState = (info_only) ? 'INFORMATION_ONLY' : FlexGlobals.topLevelApplication.appProxy.termsPopUp.currentState;
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.addEventListener(CloseEvent.CLOSE, 
						function (event:CloseEvent):void {
							PopUpManager.removePopUp(FlexGlobals.topLevelApplication.appProxy.termsPopUp);
						}
					);
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.btn_agreementYes.addEventListener(MouseEvent.CLICK, 
						function (event:MouseEvent):void {
							FlexGlobals.topLevelApplication.appProxy.has_read_terms_and_conditions = true;
							FlexGlobals.topLevelApplication.appProxy.has_agreed_to_terms_and_conditions = true;
							PopUpManager.removePopUp(FlexGlobals.topLevelApplication.appProxy.termsPopUp);
							event.currentTarget.parent.dispatchEvent(new vyperlogix.views.events.TermsAndConditionsAgreementEvent(vyperlogix.views.events.TermsAndConditionsAgreementEvent.TYPE_TERMSANDCONDITIONS_AGREEMENT));
						}
					);
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.btn_agreementNo.addEventListener(MouseEvent.CLICK, 
						function (event:MouseEvent):void {
							AlertPopUp.surpriseConfirm('If you choose YES you will NOT be allowed to use this application... Are you sure you do not agree with our very liberal Terms and Conditions ?','Are you sure about this ?',
								function (event:CloseEvent):void{
									if (event.detail == Alert.YES) {
										FlexGlobals.topLevelApplication.appProxy.has_read_terms_and_conditions = true;
										FlexGlobals.topLevelApplication.appProxy.has_agreed_to_terms_and_conditions = false;
										PopUpManager.removePopUp(FlexGlobals.topLevelApplication.appProxy.termsPopUp);
									}
									event.currentTarget.parent.dispatchEvent(new vyperlogix.views.events.TermsAndConditionsNoAgreementEvent(vyperlogix.views.events.TermsAndConditionsNoAgreementEvent.TYPE_TERMSANDCONDITIONS_NO_AGREEMENT));
								}
							);
						}
					);
				} else {
					FlexGlobals.topLevelApplication.appProxy.termsPopUp.currentState = (info_only) ? 'INFORMATION_ONLY' : FlexGlobals.topLevelApplication.appProxy.termsPopUp.currentState;
					PopUpManager.addPopUp(FlexGlobals.topLevelApplication.appProxy.termsPopUp, this, true);
				}
			}
			
			protected function buildID_clickHandler(event:MouseEvent):void {
				this.popUpTermsAndConditions(false);
			}
			
			private function get how_to_video_id():String {
				return this.parentApplication['how_to_video_id'];
			}
			
			private function get movie_orientation():String {
				return (FlexGlobals.topLevelApplication.appProxy.isLoggedIn) ? 'left' : 'right';
			}

			private function get movie_padding_right():Number {
				if ( (this._align_movie_to_ == null) || (this._align_movie_to_ == this.buildID) ) {
					return (FlexGlobals.topLevelApplication.appProxy.isLoggedIn) ? (this.buildID.width+20) : 16;
				}
				return (FlexGlobals.topLevelApplication.appProxy.isLoggedIn) ? (this.width-this.movie_vbox.width) : 16;
			}

			private function get movie_padding_left():Number {
				return (FlexGlobals.topLevelApplication.appProxy.isLoggedIn) ? 16 : 0;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:SWFLoader id="splash" x="-50" y="20" width="70%" height="100%" visible="{this.parentApplication.appProxy.is_logoVisible}" scaleContent="true" maintainAspectRatio="false" source="{this.parentApplication.appProxy.splashAnimationCls}" creationComplete="splash_creationCompleteHandler(event)"/>
	<mx:MenuBar id="menuBar" x="0" y="0" width="100%" itemClick="onItemClick_menuBar(event)" creationComplete="onCreationComplete_menuBar(event)"/>
	<mx:Canvas id="movieContainer" x="{this.width-this.movieContainer.width}" y="{this.menuBar.y+this.menuBar.height}">
		<mx:VBox width="100%" horizontalAlign="right" paddingRight="16">
			<mx:HBox width="100%" horizontalAlign="right">
				<mx:LinkButton id="buildID" label="{this.parentApplication.appProxy.build_number}" useHandCursor="true" click="buildID_clickHandler(event)"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox id="movie_vbox" width="100%" horizontalAlign="{this.movie_orientation}" paddingRight="{this.movie_padding_right}" paddingLeft="{this.movie_padding_left}">
			<mx:HBox width="100%" horizontalAlign="left" backgroundAlpha="0.0">
				<mx:TitleWindow id="movie" title="How to use this Product (watch the video)" width="{Math.min(800,this.width)}" height="{Math.min(600,this.height)}" visible="false" includeInLayout="false" showCloseButton="false" backgroundAlpha="0.0" borderStyle="none">
					<videos:YouTubeVideo id="youtube" x="0" y="0" width="100%" height="100%" video_id="{this.how_to_video_id}" horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
				</mx:TitleWindow>
			</mx:HBox>
		</mx:VBox>
	</mx:Canvas>
</mx:Canvas>
