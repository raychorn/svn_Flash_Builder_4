<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   width="100%" height="100%" 
		   resize="canvas1_resizeHandler(event)" 
		   creationComplete="canvas1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.EzHTTPService;
			import com.ObjectExplainer;
			import com.StringUtils;
			
			import controls.Alert.AlertPopUp;
			import controls.crm.ReportProblems;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.controls.menuClasses.MenuBarItem;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.events.VideoEvent;
			import mx.formatters.NumberBaseRoundType;
			import mx.formatters.NumberFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import splash.events.SplashCompletedEvent;
			
			import utils.APIHelper;
			
			import views.StylesEditor;
			
			import vyperlogix.FileIO.FileUpload;
			import vyperlogix.FileIO.events.*;
			import vyperlogix.LicenseManagement;
			import vyperlogix.events.CompletedUserLoginEvent;
			
			public var ezREST:EzHTTPService = new EzHTTPService(false,false);

			public var hang_time_ms:int = 1500;
			
			[Embed(source="assets/logos/vlcLogo/vlcLogo.swf")]
//			[Embed(source="assets/logos/plain/vlcLogo.swf")]
			[Bindable]
			public var splashAnimationCls:Class;
			
			private var licenseManagement:LicenseManagement;

			private var uploader:FileUpload;

			private var problems:ReportProblems;
			
			private var is_splash_complete:Boolean = false;
			
			private var termsPopUp:TermsAndConditions;

			private var aPopUp:StylesEditor;
			
			public static var const_view_fullscreen:String = 'view.fullscreen';
			public static var const_view_cloud:String = 'view.cloud';
			public static var const_application_exit:String = 'application.exit';
			public static var const_actions_open_editor:String = 'actions.open_editor';
			public static var const_help_report_problem:String = 'help.report_problem';
			
			private var appMenuData:Object = {
				'label':'FlexStylus', 'name':'application', 'children':[
					//{'label':'Open Flex Styles Editor...', 'name':SplashMovie.const_actions_open_editor},
					{'label':'Exit', 'name':SplashMovie.const_application_exit},
				]
			};
			
			private var actionsMenuData:Object = {
				'label':'Actions', 'name':'actions', 'children':[
					//{'label':'Open Flex Styles Editor...', 'name':SplashMovie.const_actions_open_editor},
				]
			};
			
			private var helpMenuData:Object = {
				'label':'Help', 'name':'help', 'children':[
					{'label':'Report a Problem...', 'name':SplashMovie.const_help_report_problem},
				]
			};
			
			private var menuBarData:Object = {
				'label':'View', 'name':'view', 'children':[
					{'label':'Full Screen', 'name':SplashMovie.const_view_fullscreen, 'type':"check", 'toggled':false},
				]
			};
			
			private var debugMenu:Object = {'label':'Domain', 'name':'debug.status',
				'children':[
					{'label':'appspot.com', 'name':SplashMovie.const_view_cloud, 'type':"check", 'toggled':false}
				]
			};

			private function handle_splash_complete():void {
				var _this:SplashMovie = this;
				var _timer:Timer = new Timer(this.hang_time_ms,1);
				_timer.addEventListener(TimerEvent.TIMER_COMPLETE, function (event:TimerEvent):void {
					_timer.stop();
					if (!_this.is_splash_complete) {
						_this.handle_license_management();
						_this.is_splash_complete = true;
					}
				});
				_timer.start();
			}
			
			private function handle_license_management():void {
				var _this:SplashMovie = this;
				if (!this.is_splash_complete) {
					this.licenseManagement = new LicenseManagement();
					this.licenseManagement.addEventListener(FlexEvent.CREATION_COMPLETE, function (event:FlexEvent):void {
						_this.licenseManagement.container = _this;
					});
					this.licenseManagement.addEventListener(CompletedUserLoginEvent.TYPE_COMPLETED_USER_LOGIN, 
						function(event:CompletedUserLoginEvent):void {
							var m:Array = _this.menuBar.menuBarItems;
							var mi:MenuBarItem;
							var children:Array;
							var aChild:Object;
							for (var i:String in m) {
								mi = m[i];
								if ( (mi.data.name == _this.actionsMenuData.name) || (mi.data.name == _this.appMenuData.name) || (mi.data.name == _this.helpMenuData.name) ) {
									children = mi.data.children;
									for (var ii:String in children) {
										aChild = children[ii];
										aChild.enabled = true;
									}
								}
							}
							_this.open_styles_editor();
						}
					);
					var children:Array = this.getChildren();
					var isPresentAlready:Boolean = false;
					for (var i:String in children) {
						if (children[i] is LicenseManagement) {
							isPresentAlready = true;
							break;
						}
					}
					var isLoggedIn:Boolean = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
					this.addChild(this.licenseManagement);
				}
			}
			
			protected function splash_creationCompleteHandler(event:FlexEvent):void {
				this.handle_splash_complete();
			}

			protected function canvas1_creationCompleteHandler(event:FlexEvent):void {
				var _this:* = this;
				this.addEventListener(MouseEvent.CLICK, function (event:MouseEvent):void {
					_this.handle_splash_complete();
				});
			}

			protected function canvas1_resizeHandler(event:ResizeEvent):void {
				trace(this.className+'.canvas1_resizeHandler().1 --> event='+event.toString());
			}

			private function get is_debugging():Boolean {
				return FlexGlobals.topLevelApplication.is_debugging;
			}

			private function get is_localHost():Boolean {
				return FlexGlobals.topLevelApplication.is_localHost;
			}

			private function get domain():String{
				return FlexGlobals.topLevelApplication.domain;
			}
			
			private function open_styles_editor():void {
				var _this:SplashMovie = this;
				if (!this.aPopUp) {
					this.aPopUp = new StylesEditor();
					this.aPopUp.x = 0;
					this.aPopUp.y = 25;
					this.aPopUp.percentWidth = 100.0;
					this.aPopUp.title = FlexGlobals.topLevelApplication.app_title;
					this.aPopUp.height = this.height - this.aPopUp.y - 50;
					this.addChildAt(this.aPopUp,0);
				} else {
					this.aPopUp.visible = this.aPopUp.includeInLayout = true;
				}
			}
			
			private function onItemClick_menuBar(event:MenuEvent):void {
				var _this:SplashMovie = this;
				var menu:Menu = Menu(event.menu);
				if (event.item.name == SplashMovie.const_view_fullscreen) {
					trace(this.className+'.onItemClick_menuBar().1 --> event.item.toggled='+event.item.toggled);
					if (event.item.toggled) {
						FlexGlobals.topLevelApplication.do_fullScreen();
						trace(this.className+'.onItemClick_menuBar().1a --> event.menu.dataProvider.source[0].toggled='+event.menu.dataProvider.source[0].toggled);
					} else {
						FlexGlobals.topLevelApplication.do_windowed();
						trace(this.className+'.onItemClick_menuBar().1b --> event.menu.dataProvider.source[0].toggled='+event.menu.dataProvider.source[0].toggled);
					}
					menu.toolTip = FlexGlobals.topLevelApplication.nativeWindow.stage.displayState;
				} else if (event.item.name == SplashMovie.const_view_cloud) {
					trace(this.className+'.onItemClick_menuBar().2 --> event.item.toggled='+event.item.toggled);
					if (event.item.toggled) {
						FlexGlobals.topLevelApplication.is_localHost = false;
						trace(this.className+'.onItemClick_menuBar().2a --> event.menu.dataProvider.source[0].toggled='+event.menu.dataProvider.source[0].toggled);
					} else {
						FlexGlobals.topLevelApplication.is_localHost = true;
						trace(this.className+'.onItemClick_menuBar().2b --> event.menu.dataProvider.source[0].toggled='+event.menu.dataProvider.source[0].toggled);
					}
					menu.toolTip = (this.is_localHost) ? 'LocalHost' : this.domain;
				} else if (event.item.name == SplashMovie.const_application_exit) {
					FlexGlobals.topLevelApplication.closeApplicaton();
				} else if (event.item.name == SplashMovie.const_help_report_problem) {
					if ((this.problems is ReportProblems) == false) {
						this.problems = PopUpManager.createPopUp(this, ReportProblems, true) as ReportProblems;
						this.problems.title = 'Report Problems with this Application.';
						this.problems.x = 10;
						this.problems.y = 10;
						this.problems.width = 700;
						this.problems.height = 500;
						this.problems.showCloseButton = true;
						this.problems.addEventListener(CloseEvent.CLOSE, 
							function (event:CloseEvent):void {
								PopUpManager.removePopUp(_this.problems);
								_this.problems = null;
							}
						);
						this.problems.btn_send.addEventListener(MouseEvent.CLICK, 
							function (event:MouseEvent):void {
								//AlertPopUp.surpriseNoOkay('Send Button...','Not Yet Implemented !');
								var toks:Array = FlexGlobals.topLevelApplication.app_title.split(' :: ');
								var title:String = toks[0];
								FlexGlobals.topLevelApplication.title = title+' :: Sending your Email...'
								var url:String = FlexGlobals.topLevelApplication.domain+APIHelper.send_email_endpoint;
								trace(_this.className+'.btn_send().1 --> url='+url);
								_this.ezREST.post(url,{'fromName':_this.problems.fromName.text,'email':_this.problems.email.text,'msg':_this.problems.msg.text}, 
									function (event:ResultEvent):void {
										var response:*;
										try {
											response = (event.result is String) ? event.result : event.result.getItemAt(0);
											trace(_this.className+'.btn_send().2 event='+event.toString());
											
											var errorMsg:String = response['error'];
											_this.problems.errorString = (errorMsg is String) && (errorMsg.length > 0) ? errorMsg : '';
											
											trace(_this.className+'.btn_send().3 --> _this.problems.errorString.length='+_this.problems.errorString.length);
											if ( (errorMsg is String) && (errorMsg.length > 0) ) {
												AlertPopUp.surpriseNoOkay('Your Email was not sent due to some kind of system error.  Try again later in the day.','WARNING');
											} else {
												AlertPopUp.surpriseNoOkay('Your Email was successfully sent and your issue will be resolved shortly','INFO');
											}
											PopUpManager.removePopUp(_this.problems);
											_this.problems = null;
										} catch (e:Error) {
											var stackTrace:String = e.getStackTrace();
											AlertPopUp.errorNoOkay(_this.className+'.btn_send().ERROR\n' + e.message.toString() + '\n' + StringUtils.ellipsis(stackTrace,1024),'ERROR');
										}
									}, ezREST.jsonResultType);
							}
						);
						this.problems.btn_dismiss.addEventListener(MouseEvent.CLICK, 
							function (event:MouseEvent):void {
								PopUpManager.removePopUp(_this.problems);
								_this.problems = null;
							}
						);
						PopUpManager.centerPopUp(this.problems);
					} else {
						this.problems.visible = this.problems.enabled = true;
					}
					//AlertPopUp.surpriseNoOkay(event.item.name,'Not Yet Implemented !');
				} else if (event.item.name == SplashMovie.const_actions_open_editor) {
					if (!FlexGlobals.topLevelApplication.appProxy.isLoggedIn) {
						AlertPopUp.surpriseNoOkay('You MUST Login to use this part of the application.','WARNING !!!');
					} else {
						if ((this.uploader is FileUpload) == false) {
							var isOkayToUseUploader:Boolean = true

							trace(this.className+'.onItemClick_menuBar.handle_folder_choice (from cache).3 --> isOkayToUseUploader='+isOkayToUseUploader);
							if (isOkayToUseUploader) {
								this.uploader = new FileUpload();
								this.uploader.addEventListener(FlexEvent.CREATION_COMPLETE, 
									function (event:FlexEvent):void {
										var up:FileUpload = FileUpload(event.currentTarget);
										up.title = 'Choose the Root JavaScript Folder';
										up.width = FlexGlobals.topLevelApplication.stage.nativeWindow.width - 50;
										up.file_filter_description = "JavaScript (*.js)";
										up.file_filter_types = "*.js";
										up.currentState = 'Choose_Folder_WithProgress';
										up.progress.title = 'Scanning...';
										up.addFiles();
									}
								);
								this.uploader.addEventListener(FileUploadTermsRequestedEvent.TYPE_FILE_UPLOAD_TERMS_REQUEST, 
									function (event:FileUploadTermsRequestedEvent):void {
										_this.popUpTermsAndConditions(true);
									}
								);
								this.uploader.addEventListener(FileUploadTermsAgreementEvent.TYPE_FILE_UPLOAD_TERMS_AGREEMENT, 
									function (event:FileUploadTermsAgreementEvent):void {
										_this.popUpTermsAndConditions(false);
									}
								);
								this.uploader.addEventListener(FileFolderCompletedEvent.TYPE_FILE_FOLDER_COMPLETE, 
									function (event:FileFolderCompletedEvent):void {
										var up:FileUpload = FileUpload(event.currentTarget);
										if (up is FileUpload) {
											_this.removeChild(up);
											_this.uploader = null;
										}
										AlertPopUp.surpriseNoOkay('Not yet Implemented !','WARNING');
										//_this.callLater(_this.handle_folder_choice,[_this,up,event]);
									}
								);
								this.uploader.addEventListener(FileBrowseCancelledEvent.TYPE_FILE_BROWSE_CANCELLED, 
									function (event:FileBrowseCancelledEvent):void {
										_this.removeChild(_this.uploader);
										_this.uploader = null;
									}
								);
								this.addChild(this.uploader);
							}
						} else {
							this.uploader.visible = this.uploader.enabled = true;
						}
						//AlertPopUp.surpriseNoOkay('Actions-->UpLoad','Not Yet Implemented !');
					}
				} else {
					AlertPopUp.infoNoOkay(event.toString(), this.className+'.onItemClick_menuBar().1 --> item='+event.item.name);
				}
			}
			
			private function onCreationComplete_menuBar(event:FlexEvent):void {
				var mb:MenuBar = MenuBar(event.currentTarget);
				var ac:ArrayCollection;
				if ((mb.dataProvider is ArrayCollection) == false) {
					mb.dataProvider = new ArrayCollection();
				}
				ac = ArrayCollection(mb.dataProvider);
				var children:Array;
				var aChild:Object;
				var i:String;
				trace(this.className+'.onCreationComplete_menuBar().1 --> this.is_debugging='+this.is_debugging);
				children = this.appMenuData.children;
				for (i in children) {
					aChild = children[i];
					if (aChild.name != SplashMovie.const_application_exit) {
						aChild.enabled = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
					}
				}
				ac.addItem(this.appMenuData);
				children = this.actionsMenuData.children;
				for (i in children) {
					aChild = children[i];
					aChild.enabled = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
				}
				ac.addItem(this.actionsMenuData);
				children = this.menuBarData.children;
				for (i in children) {
					aChild = children[i];
					if (aChild.name == SplashMovie.const_view_fullscreen) {
						trace(this.className+'.onCreationComplete_menuBar().2 --> FlexGlobals.topLevelApplication.nativeWindow.stage.displayState='+FlexGlobals.topLevelApplication.nativeWindow.stage.displayState+', StageDisplayState.FULL_SCREEN='+StageDisplayState.FULL_SCREEN+', aChild.toggled='+aChild.toggled);
						aChild.toggled = (FlexGlobals.topLevelApplication.nativeWindow.stage.displayState == StageDisplayState.FULL_SCREEN) ? true : false;
						trace(this.className+'.onCreationComplete_menuBar().3 --> aChild.toggled='+aChild.toggled);
					}
				}
				children = this.helpMenuData.children;
				for (i in children) {
					aChild = children[i];
					aChild.enabled = FlexGlobals.topLevelApplication.appProxy.isLoggedIn;
				}
				ac.addItem(this.helpMenuData);
				ac.addItem(this.menuBarData);
				if (this.is_debugging) {
					children = this.debugMenu.children;
					for (i in children) {
						aChild = children[i];
						if (aChild.name == SplashMovie.const_view_cloud) {
							aChild.toggled = (this.is_localHost) ? false : true;
						}
					}
					ac.addItem(this.debugMenu);
				}
			}

			private function popUpTermsAndConditions(info_only:Boolean):void {
				var _this:SplashMovie = this;
				info_only = (info_only is Boolean) ? info_only : false;
				if (!this.termsPopUp) {
					this.termsPopUp = PopUpManager.createPopUp(this, TermsAndConditions, true) as TermsAndConditions;
					this.termsPopUp.x = 10;
					this.termsPopUp.y = 10;
					this.termsPopUp.width = this.width - 30;
					this.termsPopUp.height = this.height- this.menuBar.height - 50;
					this.termsPopUp.currentState = (info_only) ? 'INFORMATION_ONLY' : this.termsPopUp.currentState;
					this.termsPopUp.addEventListener(CloseEvent.CLOSE, 
						function (event:CloseEvent):void {
							PopUpManager.removePopUp(_this.termsPopUp);
						}
					);
					this.termsPopUp.btn_agreementYes.addEventListener(MouseEvent.CLICK, 
						function (event:MouseEvent):void {
							FlexGlobals.topLevelApplication.appProxy.has_read_terms_and_conditions = true;
							FlexGlobals.topLevelApplication.appProxy.has_agreed_to_terms_and_conditions = true;
							PopUpManager.removePopUp(_this.termsPopUp);
							if (_this.uploader is FileUpload) {
								_this.uploader.refresh_terms_and_conditions_checkbox_selection();
							}
						}
					);
					this.termsPopUp.btn_agreementNo.addEventListener(MouseEvent.CLICK, 
						function (event:MouseEvent):void {
							AlertPopUp.surpriseConfirm('If you choose YES you will NOT be allowed to use this application... Are you sure you do not agree with our very liberal Terms and Conditions ?','Are you sure about this ?',
								function (event:CloseEvent):void{
									if (event.detail == Alert.YES) {
										FlexGlobals.topLevelApplication.appProxy.has_read_terms_and_conditions = true;
										FlexGlobals.topLevelApplication.appProxy.has_agreed_to_terms_and_conditions = false;
										PopUpManager.removePopUp(_this.termsPopUp);
									}
									if (_this.uploader is FileUpload) {
										_this.uploader.refresh_terms_and_conditions_checkbox_selection();
									}
								}
							);
						}
					);
				} else {
					this.termsPopUp.currentState = (info_only) ? 'INFORMATION_ONLY' : this.termsPopUp.currentState;
					PopUpManager.addPopUp(this.termsPopUp, this, true);
				}
			}
			
			protected function buildID_clickHandler(event:MouseEvent):void {
				this.popUpTermsAndConditions(false);
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:SWFLoader id="splash" x="-50" y="20" width="70%" height="100%" visible="{this.parentApplication.is_logoVisible}" scaleContent="true" maintainAspectRatio="false" source="{this.splashAnimationCls}" creationComplete="splash_creationCompleteHandler(event)"/>
	<mx:MenuBar id="menuBar" x="0" y="0" width="100%" itemClick="onItemClick_menuBar(event)" creationComplete="onCreationComplete_menuBar(event)"/>
	<mx:Canvas id="container" x="{this.width-75}" y="{this.menuBar.y+this.menuBar.height}" width="100%" backgroundColor="#0000ff" backgroundAlpha="0.25">
		<mx:LinkButton id="buildID" label="{this.parentApplication.build_number}" useHandCursor="true" click="buildID_clickHandler(event)"/>
	</mx:Canvas>
</mx:Canvas>
