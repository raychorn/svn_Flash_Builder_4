<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.tile_list {
			backgroundColor: #cccccc;
		}

		.document_title {
			fontFamily: Calibri;
			fontSize: 18pt;
			fontWeight: bold;
			color: #0000ff;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.ObjectUtils;
			
			import controls.events.ShowDocsListItemsEvent;
			import controls.renderers.ListItemRenderer;
			
			import mx.collections.*;
			import mx.controls.Button;
			import mx.events.FlexEvent;

			[Bindable]
			private var _dataProvider:Object;
			
			[Bindable]
			private var _tileListdp:ArrayList;
			
			[Embed(source="assets/icons/help_32x32.gif")]
			[Bindable]
			public var helpIconCls:Class;

			public function populate_details(search_term:String=''):void {
				var ar:Array = [];
				var item:Object;
				var _keys:Array;
				var isFound:Boolean = false;
				if (this._dataProvider) {
					var ac:ArrayCollection = this._dataProvider.item;
					for ( var i:String in ac) {
						item = ac[i];
						isFound = true;
						if (search_term.length > 0) {
							_keys = ObjectUtils.keys(item);
							//trace(this.className+'.populate_details().1 --> search_term='+search_term+', item.title='+item.title);
							isFound = false;
							if ( (_keys.indexOf('title') > -1) && (String(item.title).toLowerCase().indexOf(search_term) > -1) ) {
								isFound = true;
							}
							if ( (_keys.indexOf('text') > -1) && (String(item.text).toLowerCase().indexOf(search_term) > -1) ) {
								isFound = true;
							}
							if ( (_keys.indexOf('keywords') > -1) && (String(item.keywords).toLowerCase().indexOf(search_term) > -1) ) {
								isFound = true;
							}
						}
						if (isFound) {
							ar.push({label: item.title, data: item});
						}
					}
					this._tileListdp = new ArrayList(ar);
					//trace(this.className+'.(populate_details).1');
				}
			}
			
			public function do_search(term:String):void {
				//trace(this.className+'.do_search().1 --> term='+term);
				this.populate_details(term);
			}

			public function get dataProvider():Object {
				return this._dataProvider;
			}
			
			public function set dataProvider(dataProvider:Object):void {
				if (this._dataProvider != dataProvider) {
					this._dataProvider = dataProvider;
					this.helpIcon.visible = this.helpIcon.includeInLayout = false;
					this.populate_details();
				}
			}
			
			protected function tilelist1_creationCompleteHandler(event:FlexEvent):void {
				this.tile_list.setStyle('backgroundColor', 0x474747);
				this.populate_details();
				//trace(this.className+'.(tilelist1_creationCompleteHandler).1');
			}


			protected function helpIcon_clickHandler(event:MouseEvent):void {
				//trace(this.className+'.(helpIcon_clickHandler).1');
				this.helpIcon.visible = this.helpIcon.includeInLayout = false;
				this.dispatchEvent(new ShowDocsListItemsEvent(ShowDocsListItemsEvent.TYPE_SHOW_DOCSLIST_ITEMS));
			}

		]]>
	</fx:Script>
	<mx:VBox width="100%" height="100%" verticalAlign="top">
		<mx:HBox width="100%" backgroundColor="#ffffff" paddingLeft="5">
			<mx:Image id="helpIcon" source="{this.helpIconCls}" click="helpIcon_clickHandler(event)" buttonMode="true" useHandCursor="true" visible="false" includeInLayout="false"/>
			<mx:Label id="document_title" styleName="document_title" text="{this._dataProvider.title}"/>
		</mx:HBox>
		<mx:HBox width="100%" height="100%" styleName="tile_list">
			<s:List id="tile_list" dataProvider="{this._tileListdp}" styleName="DocsListDetails" 
					width="100%" height="100%" creationComplete="tilelist1_creationCompleteHandler(event)" 
					itemRenderer="controls.renderers.ListItemRenderer">
				<s:layout>
					<s:TileLayout verticalGap="10" horizontalGap="10" columnWidth="{ListItemRenderer.cell_width+2}" rowHeight="{ListItemRenderer.cell_height+2}"/>
				</s:layout>	
			</s:List>
			<!--
			<mx:TileList id="tile_list"
			dataProvider="{this._tileListdp}" 
			itemRenderer="controls.TileListItemRenderer"
			width="100%" height="100%"
			creationComplete="tilelist1_creationCompleteHandler(event)"
			columnWidth="{TileListItemRenderer.cell_width+2}"
			rowHeight="{TileListItemRenderer.cell_height+2}"
			verticalScrollPolicy="on"
			/>
			-->
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>
