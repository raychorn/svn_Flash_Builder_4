<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   width="100%"  
		   creationComplete="canvas1_creationCompleteHandler(event)" xmlns:controls="controls.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="PasswordValidator" source="{this.txt_Password}" property="text" 
							tooShortError="{this._passwordTooShortErrorMessage}" 
							tooLongError="{this._passwordTooLongErrorMessage}" 
							minLength="{this._passwordMinLength}" maxLength="{this._passwordMaxLength}" 
							requiredFieldError="{this._passwordRequiredFieldError}" 
							required="true"
							trigger="{this.btn_target}" triggerEvent="click" 
							/>
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="validationResultsChanged",type="controls.forms.widgets.events.ValidationResultsChangedEvent")]
	</fx:Metadata>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.AttentionLabel {
			color: #ff0000;
			fontFamily: Verdana;
			fontSize: 14;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.ErrorTipManager;
			import com.PasswordChecker;
			
			import controls.forms.widgets.events.ValidationResultsChangedEvent;
			
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			
			import spark.components.Button;

			public static var WEAK_PASSWORD:String = 'Weak';
			public static var MEDIUM_PASSWORD:String = 'Medium';
			public static var STRONG_PASSWORD:String = 'Strong';
			
			[Bindable]
			public var lbl_prompt_text:String;
			
			[Bindable]
			public var lbl_password_strength_text:String;
			
			[Bindable]
			public var btn_target:Button;
			
			[Bindable]
			public var btn_source:TextInput; // required for the framework...
			
			[Bindable]
			private var _minimum_Password_strength:String = PasswordTextField.MEDIUM_PASSWORD;
			
			[Bindable]
			private var _passwordMatchedFieldError:String = "The Password entered as the Repeated Password does not match the first Password entered.";
			
			[Bindable]
			private var __isNewlyRegisterState:Object = {};
			
			[Bindable]
			public var lbl_Password_text:String;
			
			[Bindable]
			public var hbox_lbl_prompt_container_width:Number;
			
			[Bindable]
			private var _passwordMinLength:int = 4;
			
			[Bindable]
			private var _passwordMaxLength:int = 32;
			
			[Bindable]
			private var _passwordTooShortErrorMessage:String = "This string is shorter than the minimum allowed length of 4.";
			
			[Bindable]
			private var _passwordTooLongErrorMessage:String = "This string is longer than the maximum allowed length of 32.";
			
			[Bindable]
			private var _passwordRequiredFieldError:String = "This is a Required Field that cannot be left blank or have less than 4 characters.";
			
			[Bindable]
			public var is_validated:Boolean = false;;
			
			[Bindable]
			public var lbl_prompt_styleName:String;
			
			[Bindable]
			public var lbl_password_strength_styleName:String;
			
			[Bindable]
			public var txt_Password_styleName:String;
			
			[Bindable]
			public var txt_Password_text:String;
			
			[Bindable]
			public var siblings:Array = [];
			
			public function set minimum_Password_strength(minimum_Password_strength:String):void {
				this._minimum_Password_strength = minimum_Password_strength;
			}
			
			[Inspectable]
			public function get minimum_Password_strength():String {
				return this._minimum_Password_strength;
			}
			
			public function set passwordMatchedFieldError(aMessage:String):void {
				this._passwordMatchedFieldError = aMessage;
			}
			
			[Inspectable]
			public function get passwordMatchedFieldError():String {
				return this._passwordMatchedFieldError;
			}
			
			public function set passwordMaxLength(maxLength:int):void {
				this._passwordMaxLength = maxLength;
			}
			
			[Inspectable]
			public function get passwordMaxLength():int {
				return this._passwordMaxLength;
			}
			
			public function set passwordMinLength(minLength:int):void {
				this._passwordMinLength = minLength;
			}
			
			[Inspectable]
			public function get passwordMinLength():int {
				return this._passwordMinLength;
			}
			
			public function set passwordRequiredFieldError(aMessage:String):void {
				this._passwordRequiredFieldError = aMessage;
			}
			
			[Inspectable]
			public function get passwordRequiredFieldError():String {
				return this._passwordRequiredFieldError;
			}
			
			public function set passwordTooShortErrorMessage(aMessage:String):void {
				this._passwordTooShortErrorMessage = aMessage;
			}
			
			[Inspectable]
			public function get passwordTooShortErrorMessage():String {
				return this._passwordTooShortErrorMessage;
			}
			
			public function get text():String {
				return this.txt_Password.text;
			}
			
			public function set text(text:String):void {
				if (this.txt_Password.text != text) {
					this.txt_Password.text = text;
				}
			}
			
			public function set passwordTooLongErrorMessage(aMessage:String):void {
				this._passwordTooLongErrorMessage = aMessage;
			}
			
			[Inspectable]
			public function get passwordTooLongErrorMessage():String {
				return this._passwordTooLongErrorMessage;
			}
			
			private function analyzePasswordStrength(sPwd:String):void {
				var pwdChecker:PasswordChecker = new PasswordChecker();
				if (pwdChecker.isStrongPassword(sPwd)) {
					this.lbl_password_strength_text = PasswordTextField.STRONG_PASSWORD;
				} else if (pwdChecker.isMediumPassword(sPwd)) {
					this.lbl_password_strength_text = PasswordTextField.MEDIUM_PASSWORD;
				} else {
					this.lbl_password_strength_text = PasswordTextField.WEAK_PASSWORD;
				}
			}
			
			private function validatePassword():void {       
				var previous_value:Boolean = this.is_validated;
				var vResult:ValidationResultEvent = PasswordValidator.validate();
				var btn:Button = this.btn_target;
				if (vResult.type==ValidationResultEvent.INVALID) {
					this.is_validated = false;
					if (btn is Button) {
						ErrorTipManager.refresh_button_target_state(this.txt_Password);
					}
					return;
				} else {
					var isMinPasswordOrBetter:Boolean = (this.lbl_password_strength_text == this.minimum_Password_strength);
					var bool:Boolean = isMinPasswordOrBetter;
					if (btn is Button) {
						ErrorTipManager.refresh_button_target_state(this.txt_Password);
					}
					this.is_validated = true;
					this.txt_Password.errorString = (isMinPasswordOrBetter) ? ((bool) ? "" : this._passwordMatchedFieldError) : 'Your password does not meet the minimum requirement of "'+this._minimum_Password_strength+'".  Please ensure your password meets or beats this minimum requirement.';
					if ( (this.txt_Password.errorString is String) && (this.txt_Password.errorString.length == 0) ) {
						this.callLater(ErrorTipManager.refresh_button_target_state,[this.txt_Password]);
					}
				}
				if (previous_value != this.is_validated) {
					this.dispatchEvent(new ValidationResultsChangedEvent(ValidationResultsChangedEvent.TYPE_VALIDATION_RESULTS_CHANGED,previous_value,this.is_validated));
				}
			}

			private function onKeyUp_password(event:KeyboardEvent):void {
				this.analyzePasswordStrength(this.txt_Password.text);
				this.validatePassword();
//				var txt:TextInput = event.currentTarget as TextInput;
//				if ( (event.keyCode == 13) && (txt.errorString.length == 0) ) {
//				}
			}

			private function onFocusInPassword():void {
				this.lbl_Password.visible = this.lbl_Password.includeInLayout = ( (this.lbl_Password.text is String) && (this.lbl_Password.text.length > 0) );
			}
			
			private function onFocusOutPassword(event:FocusEvent):void {
				if (!(event.relatedObject is Button)) {
					this.lbl_Password.visible = this.lbl_Password.includeInLayout = false;
					this.validatePassword();
				}
			}
			
			protected function txt_Password_creationCompleteHandler(event:FlexEvent):void {
				this.btn_source = event.currentTarget as TextInput;
				if (this.__isNewlyRegisterState[this.btn_source.id]) {
					ErrorTipManager.hideErrorTip(this.btn_source,true);
					this.__isNewlyRegisterState[this.btn_source.id] = false;
				}
			}
			
			protected function canvas1_creationCompleteHandler(event:FlexEvent):void {
				ErrorTipManager.registerValidator(this.PasswordValidator,this.siblings);
			}

		]]>
	</fx:Script>
	<s:HGroup id="container" width="100%">
		<s:HGroup id="hbox_lbl_prompt_container" paddingTop="{this.container.height/4}" verticalAlign="middle" width="{this.hbox_lbl_prompt_container_width}">
			<s:Label text="{this.lbl_prompt_text}" verticalAlign="middle" styleName="{this.lbl_prompt_styleName}" id="label1"/>
		</s:HGroup>
		<s:VGroup id="vbox_password1" width="100%">
			<s:HGroup width="100%">
				<s:TextInput id="txt_Password" editable="true" text="{this.txt_Password_text}" styleName="{this.txt_Password_styleName}" width="80%" displayAsPassword="true" keyUp="onKeyUp_password(event)" focusIn="onFocusInPassword()" focusOut="onFocusOutPassword(event)" maxChars="{this._passwordMaxLength}" creationComplete="txt_Password_creationCompleteHandler(event)"/>
				<s:Label text="{(this.label_PasswordStrength.text.length > 0) ? 'Your password stength is: ' : ''}" verticalAlign="middle" styleName="{this.lbl_prompt_styleName}"/>
				<s:Label text="{this.lbl_password_strength_text}" id="label_PasswordStrength" verticalAlign="middle" styleName="{this.lbl_password_strength_styleName}"/>
			</s:HGroup>
			<s:Label id="lbl_Password" text="{this.lbl_Password_text}" width="10%" visible="false" includeInLayout="false" verticalAlign="middle" styleName="AttentionLabel"/>
		</s:VGroup>
	</s:HGroup>
</s:Group>
