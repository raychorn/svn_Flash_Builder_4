<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer 
	minHeight="21"
	minWidth="21"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx">

	<fx:Declarations>
		<fx:Component id="defaultSortIndicator">
			<s:Path data="M 3.5 7.0 L 0.0 0.0 L 7.0 0.0 L 3.5 7.0">
				<s:fill>
					<s:RadialGradient rotation="90" focalPointRatio="1">
						<s:GradientEntry id="arrowFill1" color="0" alpha="0.6"/>
						<s:GradientEntry id="arrowFill2" color="0" alpha="0.8"/>
					</s:RadialGradient>
				</s:fill>
			</s:Path>
		</fx:Component>

		<s:Label id="labelDisplay"
			left="0" right="0" top="0" bottom="0"
			fontWeight="bold"
			textAlign="start"
			verticalAlign="middle"
			verticalCenter="1"
			maxDisplayedLines="1"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;

			import spark.components.DataGrid;
			import spark.components.GridColumnHeaderGroup;
			import spark.components.gridClasses.GridColumn;

			/**
			 *  @private
			 */
			private function dispatchChangeEvent(type:String):void
			{
				if (hasEventListener(type))
					dispatchEvent(new Event(type));
			}

			//----------------------------------
			//  maxDisplayedLines
			//----------------------------------

			[Bindable("maxDisplayedLinesChanged")]

			private var _maxDisplayedLines:int = 1;

			[Inspectable(minValue="-1")]

			/**
			 *  @copy spark.components.supportClasses.TextBase#maxDisplayedLines
			 *
			 *  @default 1
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4.5
			 */
			public function get maxDisplayedLines():int
			{
				return _maxDisplayedLines;
			}

			/**
			 *  @private
			 */
			public function set maxDisplayedLines(value:int):void
			{
				if (value == _maxDisplayedLines)
					return;

				_maxDisplayedLines = value;
				if (labelDisplay)
					labelDisplay.maxDisplayedLines = value;

				invalidateSize();
				invalidateDisplayList();

				dispatchChangeEvent("maxDisplayedLinesChanged");
			}


			//----------------------------------
			//  sortIndicator
			//----------------------------------

			[Bindable("sortIndicatorChanged")]

			private var _sortIndicator:IFactory;

            
            /**
             *  A visual element that's displayed when the column is sorted.
             * 
             *  <p>The sortIndicator visual element is added to the <code>sortIndicatorGroup</code>
             *  by this renderer's <code>prepare()</code> method.  Any size/location constraints 
             *  specified by the sortIndicator define its location relative to the sortIndicatorGroup.</p>
             * 
             *  @default null
             * 
             *  @langversion 3.0
             *  @playerversion Flash 10
             *  @playerversion AIR 1.5
             *  @productversion Flex 4.5
             */
            public function get sortIndicator():IFactory
            {
                return (_sortIndicator) ? _sortIndicator : defaultSortIndicator;
            }
            
            /**
             *  @private
             */
            public function set sortIndicator(value:IFactory):void
            {
                if (_sortIndicator == value)
                    return;
                
                _sortIndicator = value;
                if (sortIndicatorInstance)
                {
                    sortIndicatorGroup.includeInLayout = false;
                    sortIndicatorGroup.removeElement(sortIndicatorInstance);
                    sortIndicatorInstance = null;
                }
                
                invalidateDisplayList();
                dispatchChangeEvent("sortIndicatorChanged");
            }

			private var sortIndicatorInstance:IVisualElement;

            /**
             *  @private
             *  Create and add the sortIndicator to the sortIndicatorGroup and the 
             *  labelDisplay into the labelDisplayGroup.
             */
            override public function prepare(hasBeenRecycled:Boolean):void
            {
                super.prepare(hasBeenRecycled);
                
                if (labelDisplay && labelDisplayGroup && (labelDisplay.parent != labelDisplayGroup))
                {
                    labelDisplayGroup.removeAllElements();
                    labelDisplayGroup.addElement(labelDisplay);
                }
                
                const column:GridColumn = this.column;
                if (sortIndicator && column && column.grid && column.grid.dataGrid && column.grid.dataGrid.columnHeaderGroup)
                {
                    const dataGrid:DataGrid = column.grid.dataGrid;
                    const columnHeaderGroup:GridColumnHeaderGroup = dataGrid.columnHeaderGroup;
                    
                    if (columnHeaderGroup.isSortIndicatorVisible(column.columnIndex))
                    {
                        if (!sortIndicatorInstance)
                        {
                            sortIndicatorInstance = sortIndicator.newInstance();
                            sortIndicatorGroup.addElement(sortIndicatorInstance);
                        }
                        sortIndicatorInstance.visible = true;
                        sortIndicatorGroup.includeInLayout = true;
                        sortIndicatorGroup.scaleY = (column.sortDescending) ? 1 : -1;
                    }
                    else
                    {
                        if (sortIndicatorInstance)
                        {
                            sortIndicatorGroup.removeElement(sortIndicatorInstance);
                            sortIndicatorGroup.includeInLayout = false;
                            sortIndicatorInstance = null;
                        }
                    }
                }
            }
		]]>
	</fx:Script>

	<s:states>
		<s:State name="up"/>
		<s:State name="over"/>
		<s:State name="down"/>
		<s:State name="disabled"/>
	</s:states>

	<!-- fill -->
	<s:Rect id="fill"
		left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x3C3C3C" color.down="0xAAAAAA" color.over="0xBBBDBD" alpha="0.85"/>
				<s:GradientEntry color="0x3C3C3C" color.down="0x929496" color.over="0x9FA0A1" alpha="0.85"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- Container for labelDisplay:TextBase  -->
	<s:Group id="labelDisplayGroup"
		left="7" right="7" top="5" bottom="5"/>

	<!-- Container for sortIndicator:IVisualElement  -->
	<s:Group id="sortIndicatorGroup" right="5" verticalCenter="0"/>

</s:GridItemRenderer>

