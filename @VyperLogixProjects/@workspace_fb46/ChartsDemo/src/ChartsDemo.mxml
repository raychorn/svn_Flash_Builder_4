<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark"  
					   xmlns:mx="library://ns.adobe.com/flex/mx" showStatusBar="false" 
					   initialize="windowedapplication1_initializeHandler(event)" 
					   applicationDeactivate="windowedapplication1_applicationDeactivateHandler(event)"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)" 
					   xmlns:application="application.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<mx:State name="mainView"/>
		<mx:State name="updaterView"/>
	</s:states>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel.ttf");
			fontFamily: NeoSansIntel;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Light.ttf");
			fontFamily: NeoSansIntelLight;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium2;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/CALIBRI.TTF");
			fontFamily: Calibri;
			embedAsCFF: false;
		}
		
		.splash_movie_canvas {
			backgroundColor: #ffffff;
		}
		
		.LoginPanel {
			borderStyle: none;
			borderColor: #3300ff;
			borderThickness: 3;
			roundedBottomCorners: true;
			cornerRadius: 8;
			headerHeight: 31;
			headerColors: #0033ff, #330099;
			backgroundColor: #ffffff;
			backgroundAlpha: 0.3;
			shadowDistance: 6;
			shadowDirection: right;
			titleStyleName: "LoginPanelTitle";
		}
		
		.LoginPanelTitle {
			fontFamily: Calibri;
			fontSize: 16;
		}
		
		.TreeNodeWithChildren {
			fontFamily: Calibri;
			fontSize: 11;
			fontWeight: bold;
			color: blue;
		}
		
		.TreeNodeWithNoChildren {
			fontFamily: Calibri;
			fontSize: 11;
			fontWeight: normal;
			color: black;
		}
		
		.ErrorMessages {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: red;
		}
		
		.NormalMessages {
			fontFamily: Calibri;
			fontSize: 14;
			color: black;
		}
		
		.ImportantMessage {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: blue;
		}
		
		.TermsAndConditionsHTML {
			fontFamily: NeoSansIntelLight;
			fontSize: 10;
			color: black;
		}
	</fx:Style>
	<fx:Style source="css/chartsdemo.css"/>
	<fx:Script>
		<![CDATA[
			import FileIO.FileUpload;
			
			import application.NativeApplicationUpdater;
			
			import controls.Alert.AlertPopUp;
			import controls.AppIcon;
			import controls.TermsAndConditions.events.TermsAndConditionsAgreementEvent;
			import controls.TermsAndConditions.events.TermsAndConditionsNoAgreementEvent;
			import controls.crm.ReportProblems;
			
			import mx.core.FlexGlobals;
			import mx.events.AIREvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import views.models.ChartsDemoViewer;
			
			[Bindable]
			public var icon:Loader = new Loader();

			public static var force_localHost:Boolean = false; //DebuggerUtils.isDebugging;
			
			public static var problems:ReportProblems;
			
			public static var uploader:FileUpload;
			
			public var splashPopUp:*;
			
			public var app_icon_url:String = 'assets/icons/icons/app_icon_16.png';
			public var app_icon128_url:String = 'assets/icons/icons/app_icon_128.png';

			[Embed(source="assets/icons/icons/app_icon_128.png")]
			[Bindable]
			public var appLogoCls:Class;

			[Embed(source="assets/docs/terms/TermsAndConditions.html",mimeType="application/octet-stream")]
			[Bindable]
			public var TermsAndConditionsClass:Class;
			
			[Embed(source="assets/docs/GetMoney.html",mimeType="application/octet-stream")]
			[Bindable]
			public var GetMoneyClass:Class;
			
			[Bindable]
			public var how_to_video_id:String = ""; // WNyi0ER8pHc
			public var how_to_video_url:String = "http://www.youtube-nocookie.com/v/'+how_to_video_id+'?fs=1&hl=en_US&hd=1";
			
			public var Languages:Object = {
				'English':'',
				'Spanish':'Spanish'
			};
			
			public var _copyrightMessage:String;

			public static var const_view_fullscreen:String = 'view.fullscreen';
			public static var const_view_cloud:String = 'view.cloud';
			public static var const_application_exit:String = 'application.exit';
			public static var const_actions_1000:String = 'actions.1000';
			public static var const_actions_2000:String = 'actions.2000';
			public static var const_actions_3000:String = 'actions.3000';
			public static var const_actions_5000:String = 'actions.5000';
			public static var const_help_report_problem:String = 'help.report_problem';
			public static var const_actions_getForm:String = 'actions.get.form';

			public static function handle_any_number(aNumber:int):void {
				if (!FlexGlobals.topLevelApplication.appProxy.isLoggedIn) {
					AlertPopUp.surpriseNoOkay('You MUST Login to use this part of the application.','WARNING !!!');
				} else {
					var num:int = ((aNumber is int) ? aNumber : 1000);
					var aView:ChartsDemoViewer;
					try {aView = FlexGlobals.topLevelApplication.appProxy.splashPopUp.getChildByName('chartsDemoViewer') as ChartsDemoViewer;} 
						catch (err:Error) {}
					if (aView == null) {
						aView = new ChartsDemoViewer();
						aView.name = 'chartsDemoViewer';
						aView.x = 0;
						aView.y = 20;
						aView.num_points = num;
						aView.title = 'Charting '+num+' Random Data Points...';
						aView.width = FlexGlobals.topLevelApplication.appProxy.width - 10;
						aView.height = FlexGlobals.topLevelApplication.appProxy.height - 30; // - FlexGlobals.topLevelApplication.appProxy.debugger.height;
						aView.addEventListener(CloseEvent.CLOSE, 
							function (event:CloseEvent):void {
								aView.isRunning = false;
								aView.visible = false;
							}
						);
						aView.addEventListener(FlexEvent.CREATION_COMPLETE, 
							function (event:FlexEvent):void {
								aView.isRunning = true;
								aView.visible = true;
								//aView.refresh_chart();
							}
						);
						try {
							FlexGlobals.topLevelApplication.appProxy.splashPopUp.addChild(aView);
						} catch (err:Error) {
							try {
								FlexGlobals.topLevelApplication.appProxy.splashPopUp.addElement(aView);
							} catch (err:Error) {
								try {
									FlexGlobals.topLevelApplication.appProxy.addChild(aView);
								} catch (err:Error) {
									FlexGlobals.topLevelApplication.appProxy.addElement(aView);
								}
							}
						}
					}
					//AlertPopUp.surpriseNoOkay('Not yet implemented.','INFO');
				}
			}
			
			public static function handle_1000(foo:*):void {
				ChartsDemo.handle_any_number(1000);
			}

			public static function handle_2000(foo:*):void {
				ChartsDemo.handle_any_number(2000);
			}
			
			public static function handle_3000(foo:*):void {
				ChartsDemo.handle_any_number(3000);
			}
			
			public static function handle_5000(foo:*):void {
				ChartsDemo.handle_any_number(5000);
			}
			
			[Bindable]
			private var appMenu:Array = [
				{
					'label':'Charts Demo', 'name':'application', 'children':[
						{	'label':'Chart Demo and Stress Test...', 
							'name':ChartsDemo.const_actions_1000,
							'enabled':true,
							'doFunc': ChartsDemo.handle_1000
						},
						{	'label':'Exit', 
							'name':ChartsDemo.const_application_exit,
							'doFunc': function(event:*):void {
								FlexGlobals.topLevelApplication.closeApplicaton();
							}
						},
					]
				},
				{
					'label':'Help', 'name':'help', 'children':[
						{	'label':'Report a Problem...', 
							'name':ChartsDemo.const_help_report_problem,
							'enabled':false,
							'doFunc': function(event:*):void {
								/*
								if ((ChartsDemo.problems is ReportProblems) == false) {
								ChartsDemo.problems = PopUpManager.createPopUp(FlexGlobals.topLevelApplication.appProxy.splashPopUp, ReportProblems, true) as ReportProblems;
								ChartsDemo.problems.title = 'Report Problems with this Application.';
								ChartsDemo.problems.x = 10;
								ChartsDemo.problems.y = 10;
								ChartsDemo.problems.width = 700;
								ChartsDemo.problems.height = 500;
								ChartsDemo.problems.showCloseButton = true;
								ChartsDemo.problems.addEventListener(CloseEvent.CLOSE, 
								function (event:CloseEvent):void {
								PopUpManager.removePopUp(ChartsDemo.problems);
								ChartsDemo.problems = null;
								}
								);
								ChartsDemo.problems.btn_send.addEventListener(MouseEvent.CLICK, 
								function (event:MouseEvent):void {
								var toks:Array = FlexGlobals.topLevelApplication.app_title.split(' :: ');
								var title:String = toks[0];
								FlexGlobals.topLevelApplication.title = title+' :: Sending your Email...'
								var url:String = FlexGlobals.topLevelApplication.domain+APIHelper.send_email_endpoint;
								var ezREST:EzHTTPService = new EzHTTPService(false,false);
								ezREST.post(url,{'fromName':ChartsDemo.problems.fromName.text,'email':ChartsDemo.problems.email.text,'msg':ChartsDemo.problems.msg.text}, 
								function (event:ResultEvent):void {
								var response:*;
								try {
								response = (event.result is String) ? event.result : event.result.getItemAt(0);
								
								var errorMsg:String = response['error'];
								ChartsDemo.problems.errorString = (errorMsg is String) && (errorMsg.length > 0) ? errorMsg : '';
								
								if ( (errorMsg is String) && (errorMsg.length > 0) ) {
								AlertPopUp.surpriseNoOkay('Your Email was not sent due to some kind of system error.  Try again later in the day.','WARNING');
								} else {
								AlertPopUp.surpriseNoOkay('Your Email was successfully sent and your issue will be resolved shortly','INFO');
								}
								PopUpManager.removePopUp(ChartsDemo.problems);
								ChartsDemo.problems = null;
								} catch (e:Error) {
								var stackTrace:String = e.getStackTrace();
								AlertPopUp.errorNoOkay(ChartsDemo.problems.className+'.btn_send().ERROR\n' + e.message.toString() + '\n' + StringUtils.ellipsis(stackTrace,1024),'ERROR');
								}
								}, ezREST.jsonResultType);
								}
								);
								ChartsDemo.problems.btn_dismiss.addEventListener(MouseEvent.CLICK, 
								function (event:MouseEvent):void {
								PopUpManager.removePopUp(ChartsDemo.problems);
								ChartsDemo.problems = null;
								}
								);
								PopUpManager.centerPopUp(ChartsDemo.problems);
								} else {
								ChartsDemo.problems.visible = ChartsDemo.problems.enabled = true;
								}
								*/
							}
						},
					]
				},
				{
					'label':'View', 'name':'view', 'children':[
						{	'label':'Full Screen', 
							'name':ChartsDemo.const_view_fullscreen, 
							'type':"check", 
							'toggled':false, 
							'toggledFunc':function ():Boolean {return (FlexGlobals.topLevelApplication.nativeWindow.stage.displayState != StageDisplayState.NORMAL) ? true : false}, 
							'doFunc': function(event:*):void {
								//var menu:Menu = Menu(event.menu);
								if (event.item.toggled) {
									FlexGlobals.topLevelApplication.appProxy.do_fullScreen();
								} else {
									FlexGlobals.topLevelApplication.appProxy.do_windowed();
								}
								//menu.toolTip = FlexGlobals.topLevelApplication.nativeWindow.stage.displayState;
							}
						},
					]
				},
//				{'label':'Domain', 'name':'debug.status',
//					'children':[
//						{	'label':'appspot.com', 
//							'name':ChartsDemo.const_view_cloud, 
//							'type':"check", 
//							'toggled':false, 
//							'toggledFunc':function ():Boolean {return (FlexGlobals.topLevelApplication.is_localHost) ? false : true},
//							'doFunc': function(event:MenuEvent):void {
//								var menu:Menu = Menu(event.menu);
//								if (FlexGlobals.topLevelApplication.is_debugging) {
//									if (event.item.toggled) {
//										FlexGlobals.topLevelApplication.is_localHost = false;
//									} else {
//										FlexGlobals.topLevelApplication.is_localHost = true;
//									}
//									menu.toolTip = (this.is_localHost) ? 'LocalHost' : this.domain;
//								}
//							}
//						},
//					]
//				}
			];
			
			public var __local_domain__:String = 'http://localhost:9000';
			public var __public_domain__:String = 'https://chartsdemo1.appspot.com';
			
			public var language:String;
			
			public var _icon:AppIcon = new AppIcon(['assets/icons/icons/app_icon_16.png','assets/icons/icons/app_icon_32.png','assets/icons/icons/app_icon_48.png','assets/icons/icons/app_icon_128.png']);
			
			public function get domain():String {
				var d:String = (this.appProxy.__is_localhost__) ? this.__local_domain__ : this.__public_domain__;
				trace(this.className+'.domain --> this.is_debugging='+this.appProxy.is_debugging+', d='+d);
				return d;
			}
			
			public function get insecure_public_domain():String {
				return this.__public_domain__.replace('https://','http://');
			}
			
			public function get is_localHost():Boolean {
				return this.domain == this.__local_domain__;
			}
			
			public function set is_localHost(is_localHost:Boolean):void {
				this.appProxy.__is_localhost__ = is_localHost;
			}
			
			private function iconLoadComplete(e:Event):void {
				NativeApplication.nativeApplication.icon.bitmaps=[e.target.content.bitmapData];
			}
			
			private function undock(e:Event):void {
				this.stage.nativeWindow.restore();
			}
			
			private function _closeApplicaton():void {
			}
			
			public function closeApplicaton():void {
				this._closeApplicaton();
				this.appProxy.isLoggedIn = false;
				NativeApplication.nativeApplication.exit();
			}
			
			private function closeApp(e:Event):void {
				this.closeApplicaton();
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void {
				// the code that was here has been moved to allow the Auto-Updater to function...
			}
			
			protected function windowedapplication1_initializeHandler(event:FlexEvent):void {
				trace(this.className+'.windowedapplication1_initializeHandler().1 !');
			}

			private function _onCreationComplete_appProxy():void {
				var _this:ChartsDemo = this;
				trace(this.className+'.onCreationComplete_appProxy().1 !');
				this.appProxy.addEventListener(TermsAndConditionsAgreementEvent.TYPE_TERMSANDCONDITIONS_AGREEMENT,
					function(event:TermsAndConditionsAgreementEvent):void {
						if (_this['uploader'] is FileUpload) {
							_this['uploader']['refresh_terms_and_conditions_checkbox_selection']();
						}
					}
				);
				this.appProxy.addEventListener(TermsAndConditionsNoAgreementEvent.TYPE_TERMSANDCONDITIONS_NO_AGREEMENT,
					function(event:TermsAndConditionsNoAgreementEvent):void {
						if (_this['uploader'] is FileUpload) {
							_this['uploader']['refresh_terms_and_conditions_checkbox_selection']();
						}
					}
				);
				this.appProxy.TermsAndConditionsClass = this.TermsAndConditionsClass;
				this.appProxy['_onCreationComplete_appProxy'](this.appMenu);
			}
			
			protected function windowedapplication1_applicationDeactivateHandler(event:AIREvent):void {
				this._closeApplicaton();
			}

			private function onCreationComplete_AppNameSpace():void {
				this._copyrightMessage = this.AppNameSpace._copyrightMessage;
				trace(this.className+'.onCreationComplete_AppNameSpace().1 --> this._copyrightMessage='+this._copyrightMessage);
			}
			

			protected function appProxy_initializeHandler(event:FlexEvent):void {
				ApplicatonProxy.force_localHost = ChartsDemo.force_localHost;
			}
		]]>
	</fx:Script>
	<application:ApplicationNamespace id="AppNameSpace" x="0" y="0" width="0" height="0" creationComplete="onCreationComplete_AppNameSpace()"/>
	<application:ApplicatonProxy id="appProxy" x="0" y="0" width="100%" height="100%" NativeApplicationUpdater="{NativeApplicationUpdater}" initialize="appProxy_initializeHandler(event)" creationComplete="_onCreationComplete_appProxy()"/>
</s:WindowedApplication>
