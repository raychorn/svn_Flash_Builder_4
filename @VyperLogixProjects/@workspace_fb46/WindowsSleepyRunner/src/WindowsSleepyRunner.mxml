<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="http://ns.adobe.com/mxml/2009" showStatusBar="false" 
					   initialize="windowedapplication1_initializeHandler(event)" 
					   applicationDeactivate="windowedapplication1_applicationDeactivateHandler(event)"
					   creationComplete="windowedapplication1_creationCompleteHandler(event)" 
					   xmlns:application="application.*" height="0" width="0" visible="false" includeInLayout="false" 
					   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel.ttf");
			fontFamily: NeoSansIntel;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Light.ttf");
			fontFamily: NeoSansIntelLight;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium2;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/CALIBRI.TTF");
			fontFamily: Calibri;
			embedAsCFF: false;
		}
		
		.splash_movie_canvas {
			backgroundColor: #ffffff;
		}
		
		.LoginPanel {
			borderStyle: none;
			borderColor: #3300ff;
			borderThickness: 3;
			roundedBottomCorners: true;
			cornerRadius: 8;
			headerHeight: 31;
			headerColors: #0033ff, #330099;
			backgroundColor: #ffffff;
			backgroundAlpha: 0.3;
			shadowDistance: 6;
			shadowDirection: right;
			titleStyleName: "LoginPanelTitle";
		}
		
		.LoginPanelTitle {
			fontFamily: Calibri;
			fontSize: 16;
		}
		
		.TreeNodeWithChildren {
			fontFamily: Calibri;
			fontSize: 11;
			fontWeight: bold;
			color: blue;
		}
		
		.TreeNodeWithNoChildren {
			fontFamily: Calibri;
			fontSize: 11;
			fontWeight: normal;
			color: black;
		}
		
		.ErrorMessages {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: red;
		}
		
		.NormalMessages {
			fontFamily: Calibri;
			fontSize: 14;
			color: black;
		}
		
		.ImportantMessage {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: blue;
		}
		
		.TermsAndConditionsHTML {
			fontFamily: NeoSansIntelLight;
			fontSize: 10;
			color: black;
		}
	</fx:Style>
	<fx:Style source="css/chartsdemo.css"/>
	<fx:Script>
		<![CDATA[
			import FileIO.FileUpload;
			
			import application.NativeApplicationUpdater;
			
			import controls.Alert.AlertPopUp;
			import controls.AppIcon;
			import controls.TermsAndConditions.events.TermsAndConditionsAgreementEvent;
			import controls.TermsAndConditions.events.TermsAndConditionsNoAgreementEvent;
			import controls.crm.ReportProblems;
			
			import mx.core.FlexGlobals;
			import mx.events.AIREvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			[Bindable]
			public var icon:Loader = new Loader();

			public static var force_localHost:Boolean = false; //DebuggerUtils.isDebugging;
			
			public static var problems:ReportProblems;
			
			public static var uploader:FileUpload;
			
			public var splashPopUp:*;
			
			public var app_icon_url:String = 'assets/icons/icons/app_icon_16.png';
			public var app_icon128_url:String = 'assets/icons/icons/app_icon_128.png';

			[Bindable]
			private var _this:WindowsSleepyRunner;

			[Embed(source="assets/icons/icons/app_icon_128.png")]
			[Bindable]
			public var appLogoCls:Class;

			[Embed(source="assets/docs/terms/TermsAndConditions.html",mimeType="application/octet-stream")]
			[Bindable]
			public var TermsAndConditionsClass:Class;
			
			[Embed(source="assets/docs/GetMoney.html",mimeType="application/octet-stream")]
			[Bindable]
			public var GetMoneyClass:Class;
			
			[Bindable]
			public var how_to_video_id:String = ""; // WNyi0ER8pHc
			public var how_to_video_url:String = "http://www.youtube-nocookie.com/v/'+how_to_video_id+'?fs=1&hl=en_US&hd=1";
			
			public var Languages:Object = {
				'English':'',
				'Spanish':'Spanish'
			};
			
			public var _copyrightMessage:String;

			public var __local_domain__:String = 'http://localhost:9000';
			public var __public_domain__:String = 'https://chartsdemo1.appspot.com';
			
			public var language:String;
			
			public var _icon:AppIcon = new AppIcon(['assets/icons/icons/app_icon_16.png','assets/icons/icons/app_icon_32.png','assets/icons/icons/app_icon_48.png','assets/icons/icons/app_icon_128.png']);
			
			public function get domain():String {
				var d:String = (this.appProxy.__is_localhost__) ? this.__local_domain__ : this.__public_domain__;
				trace(this.className+'.domain --> this.is_debugging='+this.appProxy.is_debugging+', d='+d);
				return d;
			}
			
			public function get insecure_public_domain():String {
				return this.__public_domain__.replace('https://','http://');
			}
			
			public function get is_localHost():Boolean {
				return this.domain == this.__local_domain__;
			}
			
			public function set is_localHost(is_localHost:Boolean):void {
				this.appProxy.__is_localhost__ = is_localHost;
			}
			
			private function iconLoadComplete(e:Event):void {
				NativeApplication.nativeApplication.icon.bitmaps=[e.target.content.bitmapData];
			}
			
			private function undock(e:Event):void {
				this.stage.nativeWindow.restore();
			}
			
			private function _closeApplicaton():void {
			}
			
			public function closeApplicaton():void {
				this._closeApplicaton();
				this.appProxy.isLoggedIn = false;
				NativeApplication.nativeApplication.exit();
			}
			
			private function closeApp(e:Event):void {
				this.closeApplicaton();
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void {
				// the code that was here has been moved to allow the Auto-Updater to function...
			}
			
			protected function windowedapplication1_initializeHandler(event:FlexEvent):void {
				_this = this;
				trace(this.className+'.windowedapplication1_initializeHandler().1 !');
			}

			private function __hide_nativeWindow__():void {
				FlexGlobals.topLevelApplication.nativeWindow.minSize = new Point(0,0);
				FlexGlobals.topLevelApplication.nativeWindow.height = 0;
				FlexGlobals.topLevelApplication.nativeWindow.width = 0;
				FlexGlobals.topLevelApplication.nativeWindow.visible = false;
			}
			
			private function __show_nativeWindow__(width:Number,height:Number):void {
				FlexGlobals.topLevelApplication.nativeWindow.minSize = new Point(width,height);
				FlexGlobals.topLevelApplication.nativeWindow.height = height;
				FlexGlobals.topLevelApplication.nativeWindow.width = width;
				FlexGlobals.topLevelApplication.nativeWindow.visible = true;
			}
			
			private function OnSysTrayMenuInit(menu:NativeMenu):void {
				var testCommand:NativeMenuItem = new NativeMenuItem("Testing...");
				testCommand.addEventListener(Event.SELECT, function (event:Event):void {
					_this.__show_nativeWindow__(600,400);
					/*
					var popup:Alert = AlertPopUp.infoNoOkay('+++','DEBUG',
					function (event:CloseEvent):void {
					_this.__hide_nativeWindow__();
					}
					);
					popup.width = 550;
					popup.height = 350;
					*/
				});
				for (var i:String in menu.items) {
					var anItem:NativeMenuItem = menu.items[i] as NativeMenuItem;
					if (anItem.label.indexOf('Vyper Logix Corp') > -1) {
						var _creditsMessage:String;
						try {_creditsMessage = FlexGlobals.topLevelApplication.AppNameSpace._creditsMessage;} catch (err:Error) {}
						anItem.addEventListener(Event.SELECT,
							function (event:*):void {
								_this.__show_nativeWindow__(600,400);
								/*
								var popup:Alert = AlertPopUp.infoNoOkay('(c). Copyright, Vyper Logix Corp., All Rights Reserved...\nhttp://www.VyperLogixCorp.Com\n'+_creditsMessage,anItem.label,
								function (event:CloseEvent):void {
								_this.__hide_nativeWindow__();
								}
								);
								popup.width = 550;
								popup.height = 350;
								*/
							}
						);
						break;
					}
				}
				menu.addItem(testCommand);
				var exitCommand:NativeMenuItem = new NativeMenuItem("Exit");
				exitCommand.addEventListener(Event.SELECT, function (event:Event):void {
					setTimeout(FlexGlobals.topLevelApplication.closeApplicaton,100);
				});
				menu.addItem(exitCommand);
			}
			
			private function _onCreationComplete_appProxy():void {
				this.appProxy.OnSysTrayMenuInit = this.OnSysTrayMenuInit;
				trace(this.className+'.onCreationComplete_appProxy().1 !');
				this.appProxy.addEventListener(TermsAndConditionsAgreementEvent.TYPE_TERMSANDCONDITIONS_AGREEMENT,
					function(event:TermsAndConditionsAgreementEvent):void {
						if (_this['uploader'] is FileUpload) {
							_this['uploader']['refresh_terms_and_conditions_checkbox_selection']();
						}
					}
				);
				this.appProxy.addEventListener(TermsAndConditionsNoAgreementEvent.TYPE_TERMSANDCONDITIONS_NO_AGREEMENT,
					function(event:TermsAndConditionsNoAgreementEvent):void {
						if (_this['uploader'] is FileUpload) {
							_this['uploader']['refresh_terms_and_conditions_checkbox_selection']();
						}
					}
				);
				this.appProxy.TermsAndConditionsClass = this.TermsAndConditionsClass;
				this.appProxy['_onCreationComplete_appProxy']([]);
				//this.appProxy.debugger.visible = this.appProxy.debugger.includeInLayout = false;
				this.__hide_nativeWindow__();
				//FlexGlobals.topLevelApplication.nativeWindow.notifyUser(NotificationType.CRITICAL);
			}
			
			protected function windowedapplication1_applicationDeactivateHandler(event:AIREvent):void {
				this._closeApplicaton();
			}

			private function onCreationComplete_AppNameSpace():void {
				this._copyrightMessage = this.AppNameSpace._copyrightMessage;
				trace(this.className+'.onCreationComplete_AppNameSpace().1 --> this._copyrightMessage='+this._copyrightMessage);
			}
			

			protected function appProxy_initializeHandler(event:FlexEvent):void {
				ApplicatonProxy.force_localHost = WindowsSleepyRunner.force_localHost;
			}
		]]>
	</fx:Script>
	<application:ApplicationNamespace id="AppNameSpace" x="0" y="0" width="0" height="0" creationComplete="onCreationComplete_AppNameSpace()"/>
	<application:ApplicatonProxy id="appProxy" x="0" y="0" width="100%" height="100%" NativeApplicationUpdater="{NativeApplicationUpdater}" initialize="appProxy_initializeHandler(event)" creationComplete="_onCreationComplete_appProxy()"/>
</s:WindowedApplication>
