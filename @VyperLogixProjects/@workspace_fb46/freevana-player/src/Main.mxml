<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	currentState="videoState"
	showStatusBar="false"
	title="Freevana Player Demo" 
	width="800" height="600" 
	creationComplete="initApp()">
	<fx:Style source="assets/css/styles.css" />
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			import flash.net.URLLoader;
			import flash.net.URLRequest;
			
			import freevana.download.*;
			import freevana.util.*;
			import freevana.view.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.Button;
			import spark.components.Image;
			import spark.components.TextInput;
			
			private var _settings:Settings = new Settings();
			
			private var _subtitleURL:String = '';
			
			public function initApp():void
			{
				initLangs();
				
				this.nativeWindow.x = (Capabilities.screenResolutionX - this.nativeWindow.width) / 2;
				this.nativeWindow.y = (Capabilities.screenResolutionY - this.nativeWindow.height) / 2;
				
				this.callLater(this.startLoadingVideo,['http://youtu.be/1hPpG4s3-O4']);
			}
			
			public function getAppVersion():String {
				var appXml:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXml.namespace();
				var appVersion:String = appXml.ns::versionNumber[0];
				return appVersion;
			}
			
			private function getUserLang():String
			{
				var langs:Array = Capabilities.languages;
				return (langs[0] as String).toUpperCase();
			}
			
			private function initLangs():void
			{
				var prefLang:String = getUserLang();
				trace("[main] Lang is: " + prefLang);
				if (prefLang.indexOf("EN") != -1) {
					resourceManager.localeChain = ['en_US'];
				} else {
					resourceManager.localeChain = ['es_ES'];
				}
			}
			
			private function resetVideoPlayer():void
			{
				if (videoCanvas && videoCanvas != null) {
					videoCanvas.removeAllChildren();
				}
			}
			
			private function startGettingVideoData(item:Object, isMovie:Boolean):void 
			{
				var _mainApp:* = this;
			}
			
			private function startLoadingVideo(movieURL:String):void
			{
				//libraryMainLabel.text = "Buffering movie...";
				_settings.setPreferredPlayer(VideoPlayer.VIDEO_PLAYER_FLOW);
				var _videoPlayer:IVideoPlayer = VideoPlayer.create(_settings, movieURL, _subtitleURL);
				_videoPlayer.addEventListener(VideoPlayer.PLAYER_INITIALIZING, onVideoPlayerInit);
				_videoPlayer.addEventListener(VideoPlayer.PLAYER_READY, onVideoPlayerReady);
				_videoPlayer.addEventListener(VideoPlayer.PLAYER_STOPPED, onVideoPlayerStopped);
				_videoPlayer.addEventListener(VideoPlayer.VIDEO_NOT_AVAILABLE, onVideoNotAvailable);
				
				function onVideoPlayerInit(event:Event):void {
					// Change to VideoView
					currentState = "videoState";
					videoCanvas.addChild(_videoPlayer.getUIComponent());
					_videoPlayer.onAddedToStage();
				}
				
				function onVideoPlayerReady(event:Event):void {
					trace("[main] onVideoPlayerReady.");
				}
				
				function onVideoPlayerStopped(event:Event):void {
					resetVideoPlayer();
				}
				
				function onVideoNotAvailable(event:Event):void {
					Alert.show(resourceManager.getString('Strings', 'VIDEO_NOT_AVAILABLE'));
					resetVideoPlayer();
				}
				
				_videoPlayer.init();
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[ResourceBundle("Strings")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="videoState" />
	</s:states>
	<mx:Canvas id="videoCanvas" x="0" y="0" width="100%" opaqueBackground="#000000" height="100%" includeIn="videoState"/>
	
</s:WindowedApplication>