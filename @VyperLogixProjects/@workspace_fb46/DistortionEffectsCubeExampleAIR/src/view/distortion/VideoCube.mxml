<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
    horizontalAlign="center"
    verticalAlign="middle"
    verticalGap="20"
    creationComplete="onCreationComplete()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:view="view.videocube.*">

    <mx:Script>
        <![CDATA[
			import com.adobe.ac.control.StateEvent;
			import com.adobe.ac.control.StateMachine;
			import com.adobe.ac.mxeffects.CubeRotate;
			import com.adobe.ac.mxeffects.DistortionConstants;
			import com.adobe.ac.mxeffects.Door;
			import com.adobe.ac.mxeffects.Flip;
			import com.adobe.ac.mxeffects.Gate;
			import com.adobe.ac.mxeffects.Pop;
			import com.adobe.ac.mxeffects.Push;
			
			import flash.filters.BlurFilter;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.core.Container;
			import mx.core.UIComponent;
			import mx.effects.easing.*;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import view.videocube.DirectionEvent;

            [Bindable]
            private var FLIP:String = "Flip";

            [Bindable]
            private var CUBE_ROTATE:String = "CubeRotate";

            [Bindable]
            private var PUSH:String = "Push";

            [Bindable]
            private var POP:String = "Pop";

            [Bindable]
            private var DOOR:String = "Door";

            [Bindable]
            private var GATE:String = "Gate";

            [Bindable]
            private var OPEN:String = "OPEN";

            [Bindable]
            private var CLOSE:String = "CLOSE";

            [Bindable]
            private var QUALITY:String = "QUALITY";

            [Bindable]
            private var SPEED:String = "SPEED";

            private var stateMachine:StateMachine = StateMachine.getInstance();

            private var easing:Function = Sine.easeInOut;

            //private var easing : Function = Circ.easeIn;
            //private var easing : Function = Linear.easeNone;        

            private function getBlur():BlurFilter
            {
                var blur:BlurFilter = null;
                if (blurCheckBox.selected)
                {
                    blur = new BlurFilter();
                    blur.blurX = Number(blurXTextInput.text);
                    blur.blurY = Number(blurYTextInput.text);
                }
                return blur;
            }

            private function exceedBounds():Boolean
            {
                return Boolean(exceedBoundsCheckBox.selected);
            }

            private function getDistortion():Number
            {
                return Number(distortionTextInput.text);
            }

            private function getDuration():Number
            {
                return Number(durationTextInput.text);
            }

            private function onFlipEnd(event:EffectEvent):void
            {
                var target:Container = Container(event.currentTarget.siblings[event.currentTarget.siblings.length - 1]);
                viewStack.selectedChild = target;
            }

            private function onCreationComplete():void
            {

                var LOGIN_STATE:String = "login";
                var QUICK_SEARCH_STATE:String = "quickSearch";
                var SEARCH_STATE:String = "search";
                var PRODUCT_LIST_STATE:String = "productList";
                var REGISTRATION_STATE:String = "registration";
                var CALENDAR_STATE:String = "calendar";

                stateMachine.register(LOGIN_STATE);
                stateMachine.register(QUICK_SEARCH_STATE);
                stateMachine.register(SEARCH_STATE);
                stateMachine.register(PRODUCT_LIST_STATE);
                stateMachine.register(REGISTRATION_STATE);
                stateMachine.register(CALENDAR_STATE);

                stateMachine.setRepresentation(LOGIN_STATE, login);
                stateMachine.setRepresentation(QUICK_SEARCH_STATE, quickSearch);
                stateMachine.setRepresentation(SEARCH_STATE, search);
                stateMachine.setRepresentation(PRODUCT_LIST_STATE, productList);
                stateMachine.setRepresentation(REGISTRATION_STATE, registration);
                stateMachine.setRepresentation(CALENDAR_STATE, calendar);

                stateMachine.addTransition(LOGIN_STATE, PRODUCT_LIST_STATE, DirectionEvent.LEFT);
                stateMachine.addTransition(LOGIN_STATE, SEARCH_STATE, DirectionEvent.LEFT + 2);
                stateMachine.addTransition(LOGIN_STATE, QUICK_SEARCH_STATE, DirectionEvent.LEFT + 3);
                stateMachine.addTransition(LOGIN_STATE, LOGIN_STATE, DirectionEvent.LEFT + 4);
                stateMachine.addTransition(LOGIN_STATE, QUICK_SEARCH_STATE, DirectionEvent.RIGHT);
                stateMachine.addTransition(LOGIN_STATE, SEARCH_STATE, DirectionEvent.RIGHT + 2);
                stateMachine.addTransition(LOGIN_STATE, PRODUCT_LIST_STATE, DirectionEvent.RIGHT + 3);
                stateMachine.addTransition(LOGIN_STATE, LOGIN_STATE, DirectionEvent.RIGHT + 4);
                stateMachine.addTransition(LOGIN_STATE, REGISTRATION_STATE, DirectionEvent.TOP);
                stateMachine.addTransition(LOGIN_STATE, SEARCH_STATE, DirectionEvent.TOP + 2);
                stateMachine.addTransition(LOGIN_STATE, CALENDAR_STATE, DirectionEvent.TOP + 3);
                stateMachine.addTransition(LOGIN_STATE, LOGIN_STATE, DirectionEvent.TOP + 4);
                stateMachine.addTransition(LOGIN_STATE, CALENDAR_STATE, DirectionEvent.BOTTOM);
                stateMachine.addTransition(LOGIN_STATE, SEARCH_STATE, DirectionEvent.BOTTOM + 2);
                stateMachine.addTransition(LOGIN_STATE, REGISTRATION_STATE, DirectionEvent.BOTTOM + 3);
                stateMachine.addTransition(LOGIN_STATE, LOGIN_STATE, DirectionEvent.BOTTOM + 4);

                stateMachine.addTransition(QUICK_SEARCH_STATE, LOGIN_STATE, DirectionEvent.LEFT);
                stateMachine.addTransition(QUICK_SEARCH_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.LEFT + 2);
                stateMachine.addTransition(QUICK_SEARCH_STATE, SEARCH_STATE, DirectionEvent.LEFT + 3);
                stateMachine.addTransition(QUICK_SEARCH_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.LEFT + 4);
                stateMachine.addTransition(QUICK_SEARCH_STATE, SEARCH_STATE, DirectionEvent.RIGHT);
                stateMachine.addTransition(QUICK_SEARCH_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.RIGHT + 2);
                stateMachine.addTransition(QUICK_SEARCH_STATE, LOGIN_STATE, DirectionEvent.RIGHT + 3);
                stateMachine.addTransition(QUICK_SEARCH_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.RIGHT + 4);
                stateMachine.addTransition(QUICK_SEARCH_STATE, REGISTRATION_STATE,
                                           DirectionEvent.TOP);
                stateMachine.addTransition(QUICK_SEARCH_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.TOP + 2);
                stateMachine.addTransition(QUICK_SEARCH_STATE, CALENDAR_STATE, DirectionEvent.TOP + 3);
                stateMachine.addTransition(QUICK_SEARCH_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.TOP + 4);
                stateMachine.addTransition(QUICK_SEARCH_STATE, CALENDAR_STATE, DirectionEvent.BOTTOM);
                stateMachine.addTransition(QUICK_SEARCH_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.BOTTOM + 2);
                stateMachine.addTransition(QUICK_SEARCH_STATE, REGISTRATION_STATE,
                                           DirectionEvent.BOTTOM + 3);
                stateMachine.addTransition(QUICK_SEARCH_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.BOTTOM + 4);

                stateMachine.addTransition(SEARCH_STATE, QUICK_SEARCH_STATE, DirectionEvent.LEFT);
                stateMachine.addTransition(SEARCH_STATE, LOGIN_STATE, DirectionEvent.LEFT + 2);
                stateMachine.addTransition(SEARCH_STATE, PRODUCT_LIST_STATE, DirectionEvent.LEFT + 3);
                stateMachine.addTransition(SEARCH_STATE, SEARCH_STATE, DirectionEvent.LEFT + 4);
                stateMachine.addTransition(SEARCH_STATE, PRODUCT_LIST_STATE, DirectionEvent.RIGHT);
                stateMachine.addTransition(SEARCH_STATE, LOGIN_STATE, DirectionEvent.RIGHT + 2);
                stateMachine.addTransition(SEARCH_STATE, QUICK_SEARCH_STATE, DirectionEvent.RIGHT + 3);
                stateMachine.addTransition(SEARCH_STATE, SEARCH_STATE, DirectionEvent.RIGHT + 4);
                stateMachine.addTransition(SEARCH_STATE, CALENDAR_STATE, DirectionEvent.TOP);
                stateMachine.addTransition(SEARCH_STATE, LOGIN_STATE, DirectionEvent.TOP + 2);
                stateMachine.addTransition(SEARCH_STATE, REGISTRATION_STATE, DirectionEvent.TOP + 3);
                stateMachine.addTransition(SEARCH_STATE, SEARCH_STATE, DirectionEvent.TOP + 4);
                stateMachine.addTransition(SEARCH_STATE, REGISTRATION_STATE, DirectionEvent.BOTTOM);
                stateMachine.addTransition(SEARCH_STATE, LOGIN_STATE, DirectionEvent.BOTTOM + 2);
                stateMachine.addTransition(SEARCH_STATE, CALENDAR_STATE, DirectionEvent.BOTTOM + 3);
                stateMachine.addTransition(SEARCH_STATE, SEARCH_STATE, DirectionEvent.BOTTOM + 4);

                stateMachine.addTransition(PRODUCT_LIST_STATE, SEARCH_STATE, DirectionEvent.LEFT);
                stateMachine.addTransition(PRODUCT_LIST_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.LEFT + 2);
                stateMachine.addTransition(PRODUCT_LIST_STATE, LOGIN_STATE, DirectionEvent.LEFT + 3);
                stateMachine.addTransition(PRODUCT_LIST_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.LEFT + 4);
                stateMachine.addTransition(PRODUCT_LIST_STATE, LOGIN_STATE, DirectionEvent.RIGHT);
                stateMachine.addTransition(PRODUCT_LIST_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.RIGHT + 2);
                stateMachine.addTransition(PRODUCT_LIST_STATE, SEARCH_STATE, DirectionEvent.RIGHT + 3);
                stateMachine.addTransition(PRODUCT_LIST_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.RIGHT + 4);
                stateMachine.addTransition(PRODUCT_LIST_STATE, REGISTRATION_STATE,
                                           DirectionEvent.TOP);
                stateMachine.addTransition(PRODUCT_LIST_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.TOP + 2);
                stateMachine.addTransition(PRODUCT_LIST_STATE, CALENDAR_STATE, DirectionEvent.TOP + 3);
                stateMachine.addTransition(PRODUCT_LIST_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.TOP + 4);
                stateMachine.addTransition(PRODUCT_LIST_STATE, CALENDAR_STATE, DirectionEvent.BOTTOM);
                stateMachine.addTransition(PRODUCT_LIST_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.BOTTOM + 2);
                stateMachine.addTransition(PRODUCT_LIST_STATE, REGISTRATION_STATE,
                                           DirectionEvent.BOTTOM + 3);
                stateMachine.addTransition(PRODUCT_LIST_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.BOTTOM + 4);

                stateMachine.addTransition(REGISTRATION_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.LEFT);
                stateMachine.addTransition(REGISTRATION_STATE, CALENDAR_STATE, DirectionEvent.LEFT + 2);
                stateMachine.addTransition(REGISTRATION_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.LEFT + 3);
                stateMachine.addTransition(REGISTRATION_STATE, REGISTRATION_STATE,
                                           DirectionEvent.LEFT + 4);
                stateMachine.addTransition(REGISTRATION_STATE, QUICK_SEARCH_STATE,
                                           DirectionEvent.RIGHT);
                stateMachine.addTransition(REGISTRATION_STATE, CALENDAR_STATE, DirectionEvent.RIGHT + 2);
                stateMachine.addTransition(REGISTRATION_STATE, PRODUCT_LIST_STATE,
                                           DirectionEvent.RIGHT + 3);
                stateMachine.addTransition(REGISTRATION_STATE, REGISTRATION_STATE,
                                           DirectionEvent.RIGHT + 4);
                stateMachine.addTransition(REGISTRATION_STATE, SEARCH_STATE, DirectionEvent.TOP);
                stateMachine.addTransition(REGISTRATION_STATE, CALENDAR_STATE, DirectionEvent.TOP + 2);
                stateMachine.addTransition(REGISTRATION_STATE, LOGIN_STATE, DirectionEvent.TOP + 3);
                stateMachine.addTransition(REGISTRATION_STATE, REGISTRATION_STATE,
                                           DirectionEvent.TOP + 4);
                stateMachine.addTransition(REGISTRATION_STATE, LOGIN_STATE, DirectionEvent.BOTTOM);
                stateMachine.addTransition(REGISTRATION_STATE, CALENDAR_STATE, DirectionEvent.BOTTOM + 2);
                stateMachine.addTransition(REGISTRATION_STATE, SEARCH_STATE, DirectionEvent.BOTTOM + 3);
                stateMachine.addTransition(REGISTRATION_STATE, REGISTRATION_STATE,
                                           DirectionEvent.BOTTOM + 4);

                stateMachine.addTransition(CALENDAR_STATE, PRODUCT_LIST_STATE, DirectionEvent.LEFT);
                stateMachine.addTransition(CALENDAR_STATE, REGISTRATION_STATE, DirectionEvent.LEFT + 2);
                stateMachine.addTransition(CALENDAR_STATE, QUICK_SEARCH_STATE, DirectionEvent.LEFT + 3);
                stateMachine.addTransition(CALENDAR_STATE, CALENDAR_STATE, DirectionEvent.LEFT + 4);
                stateMachine.addTransition(CALENDAR_STATE, QUICK_SEARCH_STATE, DirectionEvent.RIGHT);
                stateMachine.addTransition(CALENDAR_STATE, REGISTRATION_STATE, DirectionEvent.RIGHT + 2);
                stateMachine.addTransition(CALENDAR_STATE, PRODUCT_LIST_STATE, DirectionEvent.RIGHT + 3);
                stateMachine.addTransition(CALENDAR_STATE, CALENDAR_STATE, DirectionEvent.RIGHT + 4);
                stateMachine.addTransition(CALENDAR_STATE, LOGIN_STATE, DirectionEvent.TOP);
                stateMachine.addTransition(CALENDAR_STATE, REGISTRATION_STATE, DirectionEvent.TOP + 2);
                stateMachine.addTransition(CALENDAR_STATE, SEARCH_STATE, DirectionEvent.TOP + 3);
                stateMachine.addTransition(CALENDAR_STATE, CALENDAR_STATE, DirectionEvent.TOP + 4);
                stateMachine.addTransition(CALENDAR_STATE, SEARCH_STATE, DirectionEvent.BOTTOM);
                stateMachine.addTransition(CALENDAR_STATE, REGISTRATION_STATE, DirectionEvent.BOTTOM + 2);
                stateMachine.addTransition(CALENDAR_STATE, LOGIN_STATE, DirectionEvent.BOTTOM + 3);
                stateMachine.addTransition(CALENDAR_STATE, CALENDAR_STATE, DirectionEvent.BOTTOM + 4);

                stateMachine.currentState = LOGIN_STATE;
                stateMachine.addEventListener(StateEvent.STATE_CHANGE, onStateChange);

            }

            private function onStateChange(event:StateEvent):void
            {
                //trace( "state name " + event.state.alias );				
            }

            private function backward():void
            {
                stateMachine.backward();
            }

            private function forward():void
            {
                stateMachine.forward();
            }








            private function flipScreen(event:DirectionEvent):void
            {
                var target:UIComponent = UIComponent(stateMachine.currentStateRepresentation);
                var direction:String = mapDirection(event.direction);
                var siblings:Array = new Array();
                var steps:int = event.steps;
                if (steps > 1)
                {
                    for (var i:int = 0; i < steps; i++)
                    {
                        siblings.push(stateMachine.next(event.direction));
                    }
                }
                else
                {
                    stateMachine.next(event.direction);
                    siblings.push(UIComponent(stateMachine.currentStateRepresentation));
                }
                if (effectCombo.selectedItem == FLIP)
                {
                    var flip:Flip = new Flip(target);
                    flip.liveUpdate = true;
                    flip.exceedBounds = exceedBounds();
                    flip.direction = direction;
                    flip.smooth = smoothModeCombo.selectedItem as Boolean;
                    flip.siblings = siblings;
                    flip.blur = getBlur();
                    flip.distortion = getDistortion();
                    flip.exceedBounds = exceedBounds();
                    flip.duration = getDuration();
                    flip.easingFunction = easing;
                    flip.suspendBackgroundProcessing = true;
                    flip.addEventListener(EffectEvent.EFFECT_END, onFlipEnd);
                    flip.play();
                }
                else if (effectCombo.selectedItem == CUBE_ROTATE)
                {
                    var flipCube:CubeRotate = new CubeRotate(target);
                    flipCube.liveUpdate = true;
                    flipCube.direction = direction;
                    flipCube.smooth = smoothModeCombo.selectedItem as Boolean;
                    flipCube.siblings = siblings;
                    flipCube.blur = getBlur();
                    flipCube.distortion = getDistortion();
                    flipCube.duration = getDuration();
                    flipCube.easingFunction = easing;
                    flipCube.suspendBackgroundProcessing = true;
                    flipCube.addEventListener(EffectEvent.EFFECT_END, onFlipEnd);
                    flipCube.play();
                }
                else if (effectCombo.selectedItem == PUSH)
                {
                    var push:Push = new Push(target);
                    push.liveUpdate = true;
                    push.direction = direction;
                    push.smooth = smoothModeCombo.selectedItem as Boolean;
                    push.siblings = siblings;
                    push.blur = getBlur();
                    push.distortion = getDistortion();
                    push.duration = getDuration();
                    push.easingFunction = easing;
                    push.suspendBackgroundProcessing = true;
                    push.addEventListener(EffectEvent.EFFECT_END, onFlipEnd);
                    push.play();
                }
                else if (effectCombo.selectedItem == POP)
                {
                    var pop:Pop = new Pop(target);
                    pop.liveUpdate = true;
                    pop.direction = direction;
                    pop.smooth = smoothModeCombo.selectedItem as Boolean;
                    pop.siblings = siblings;
                    pop.blur = getBlur();
                    pop.distortion = getDistortion();
                    pop.duration = getDuration();
                    pop.easingFunction = easing;
                    pop.suspendBackgroundProcessing = true;
                    pop.addEventListener(EffectEvent.EFFECT_END, onFlipEnd);
                    pop.play();
                }
                else if (effectCombo.selectedItem == DOOR)
                {
                    var door:Door = new Door(target);
                    door.liveUpdate = true;
                    door.mode = (effectModeDoor.selectedItem == OPEN) ? Door.OPEN : Door.CLOSE;
                    door.direction = direction;
                    door.smooth = smoothModeCombo.selectedItem as Boolean;
                    door.siblings = siblings;
                    door.blur = getBlur();
                    door.distortion = getDistortion();
                    door.duration = getDuration();
                    door.easingFunction = easing;
                    door.suspendBackgroundProcessing = true;
                    door.addEventListener(EffectEvent.EFFECT_END, onFlipEnd);
                    door.play();
                }
                else if (effectCombo.selectedItem == GATE)
                {
                    var gate:Gate = new Gate(target);
                    gate.liveUpdate = true;
                    gate.mode = (effectModeDoor.selectedItem == OPEN) ? Door.OPEN : Door.CLOSE;
                    gate.direction = direction;
                    gate.smooth = smoothModeCombo.selectedItem as Boolean;
                    gate.siblings = siblings;
                    gate.blur = getBlur();
                    gate.distortion = getDistortion();
                    gate.duration = getDuration();
                    gate.easingFunction = easing;
                    gate.suspendBackgroundProcessing = true;
                    gate.addEventListener(EffectEvent.EFFECT_END, onFlipEnd);
                    gate.play();
                }
            }

            private function mapDirection(direction:String):String
            {
                var flipDirection:String;
                switch (direction)
                {
                    case DistortionConstants.LEFT:
                        flipDirection = DistortionConstants.RIGHT;
                        break;
                    case DistortionConstants.RIGHT:
                        flipDirection = DistortionConstants.LEFT;
                        break;
                    case DistortionConstants.TOP:
                        flipDirection = DistortionConstants.BOTTOM;
                        break;
                    case DistortionConstants.BOTTOM:
                        flipDirection = DistortionConstants.TOP;
                        break;
                    default:
                        flipDirection = direction;
                        break;
                }
                return flipDirection;
            }

            private function onEffectChange(effect:String):void
            {
                var isFlipStack:Boolean = (effect == "Push" || effect == "Pop" || effect == "Door" || effect == "Gate");
                if (isFlipStack)
                    styleCube();
                else
                    unstyleCube();
            }

            private function styleCube():void
            {
                var isStyled:Boolean = (login.getStyle("borderAlpha") != 1);
                if (isStyled)
                {
                    login.setStyle("borderAlpha", 1);
                    quickSearch.setStyle("borderAlpha", 1);
                    search.setStyle("borderAlpha", 1);
                    productList.setStyle("borderAlpha", 1);
                    registration.setStyle("borderAlpha", 1);
                    calendar.setStyle("borderAlpha", 1);

                    quickSearch.setStyle("backgroundColor", "blue");
                    search.setStyle("backgroundColor", "red");
                    productList.setStyle("backgroundColor", "yellow");
                    registration.setStyle("backgroundColor", "green");
                    calendar.setStyle("backgroundColor", "purple");
                }
            }

            private function unstyleCube():void
            {
                var isUnstyled:Boolean = (login.getStyle("borderAlpha") != .4);
                if (isUnstyled)
                {
                    login.setStyle("borderAlpha", .4);
                    quickSearch.setStyle("borderAlpha", .4);
                    search.setStyle("borderAlpha", .4);
                    productList.setStyle("borderAlpha", .4);
                    registration.setStyle("borderAlpha", .4);
                    calendar.setStyle("borderAlpha", .4);

                    quickSearch.setStyle("backgroundColor", "white");
                    search.setStyle("backgroundColor", "white");
                    productList.setStyle("backgroundColor", "white");
                    registration.setStyle("backgroundColor", "white");
                    calendar.setStyle("backgroundColor", "white");
                }
            }

            private function isFlipEffect(effect:String):Boolean
            {
                return (effect == "Flip");
            }

            private function isDoorEffect(effect:String):Boolean
            {
                return (effect == "Door" || effect == "Gate");
            }

            private function effectComboChanged(effect:String):void
            {
                onEffectChange(effect);
            }

			public function effectComboChangedBinding(event:FlexEvent):void {
				var watcherSetter:ChangeWatcher = 
					BindingUtils.bindSetter(effectComboChanged, effectCombo, "selectedItem");
			}
		]]>
    </mx:Script>

    <mx:Form>
        <mx:FormItem 
            label="Effect" direction="horizontal">
            <mx:ComboBox id="effectCombo" initialize="effectComboChangedBinding(event)">
                <mx:dataProvider>
                    <mx:Array>
                        <mx:String>CubeRotate</mx:String>
                        <mx:String>Flip</mx:String>
                        <mx:String>Push</mx:String>
                        <mx:String>Pop</mx:String>
                        <mx:String>Door</mx:String>
                        <mx:String>Gate</mx:String>
                    </mx:Array>
                </mx:dataProvider>
            </mx:ComboBox>
            <mx:ComboBox id="effectModeDoor"
                hideEffect="Fade"
                showEffect="Fade"
                includeInLayout="{ isDoorEffect( String( effectCombo.selectedItem ) ) }"
                visible="{ isDoorEffect( String( effectCombo.selectedItem ) ) }">
                <mx:dataProvider>
                    <mx:Array>
                        <mx:String>OPEN</mx:String>
                        <mx:String>CLOSE</mx:String>
                    </mx:Array>
                </mx:dataProvider>
            </mx:ComboBox>
        </mx:FormItem>
        <mx:FormItem label="Smoothing">
            <mx:ComboBox id="smoothModeCombo">
                <mx:dataProvider>
                    <mx:Array>
                        <mx:Boolean>false</mx:Boolean>
                        <mx:Boolean>true</mx:Boolean>
                    </mx:Array>
                </mx:dataProvider>
            </mx:ComboBox>
        </mx:FormItem>
        <mx:FormItem 
            label="Blur" direction="horizontal">
            <mx:CheckBox id="blurCheckBox"
                selected="false"/>
            <mx:FormItem 
                hideEffect="Fade"
                showEffect="Fade"
                includeInLayout="{ blurCheckBox.selected }" label="BlurX:"
                visible="{ blurCheckBox.selected }">
                <mx:TextInput id="blurXTextInput"
                    width="30"
                    text="4"/>
            </mx:FormItem>
            <mx:FormItem 
                hideEffect="Fade"
                showEffect="Fade"
                includeInLayout="{ blurCheckBox.selected }" label="BlurY:"
                visible="{ blurCheckBox.selected }">
                <mx:TextInput id="blurYTextInput"
                    width="30"
                    text="4"/>
            </mx:FormItem>
        </mx:FormItem>
        <mx:FormItem 
            showEffect="Fade"
            label="Exceeds bounds"
            includeInLayout="{ isFlipEffect( String( effectCombo.selectedItem ) ) }"
            visible="{ isFlipEffect( String( effectCombo.selectedItem ) ) }">
            <mx:CheckBox id="exceedBoundsCheckBox"
                selected="false"/>
        </mx:FormItem>
        <mx:FormItem label="Distortion">
            <mx:TextInput id="distortionTextInput"
                width="50"
                text="20"/>
        </mx:FormItem>
        <mx:FormItem label="Duration (ms)">
            <mx:TextInput id="durationTextInput"
                width="50"
                text="750"/>
        </mx:FormItem>
    </mx:Form>

    <!--
         width="383" height="348"
         width="385" height="385"
    -->

    <mx:ViewStack id="viewStack"
        creationPolicy="all">

        <view:Video id="login"
            width="320" height="270"
            direction="flipScreen( DirectionEvent( event ) );"/>
        <view:Video id="quickSearch"
            direction="flipScreen( DirectionEvent( event ) );"/>
        <view:Video id="search"
            direction="flipScreen( DirectionEvent( event ) );"/>
        <view:Video id="productList"
            direction="flipScreen( DirectionEvent( event ) );"/>
        <view:Video id="registration"
            direction="flipScreen( DirectionEvent( event ) );"/>
        <view:Video id="calendar"
            direction="flipScreen( DirectionEvent( event ) );"/>

    </mx:ViewStack>

</mx:VBox>
