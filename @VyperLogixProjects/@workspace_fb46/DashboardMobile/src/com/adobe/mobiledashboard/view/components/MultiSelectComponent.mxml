<?xml version="1.0" encoding="utf-8"?>
<s:Group resize="resizeHandler(event)"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:images="assets.images.*"
		 xmlns:components="com.adobe.mobiledashboard.view.components.*">

	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;

			import spark.events.IndexChangeEvent;

			private var _dataProvider:ArrayCollection;

			[Bindable]
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}

			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider=value;

				if (_dataProvider && _dataProvider.length > 0)
				{
					_selectedItem=_dataProvider.getItemAt(0);
				}
			}


			private var _selectedItem:Object;

			[Bindable]
			public function get selectedItem():Object
			{
				return _selectedItem;
			}

			public function set selectedItem(value:Object):void
			{
				_selectedItem=value;
				if (_selectedItem && _selectedItem.label)
				{
					text=_selectedItem.label;
				}

				dispatchEvent(new Event(Event.CHANGE));
			}

			private var _text:String;

			[Bindable]
			public function get text():String
			{
				return _text;
			}

			public function set text(value:String):void
			{
				_text=value;
			}


			private var popUpList:MultiSelectList;


			//
			// Private methods
			//

			private function addListeners():void
			{
				popUpList.addEventListener(IndexChangeEvent.CHANGE, popUpListChangeHandler, false, 0, true);
				systemManager.stage.addEventListener(KeyboardEvent.KEY_UP, deviceKeyUpHandler, false, 1000, true);
			}

			private function removeListeners():void
			{
				popUpList.removeEventListener(IndexChangeEvent.CHANGE, popUpListChangeHandler);
				systemManager.stage.removeEventListener(KeyboardEvent.KEY_UP, deviceKeyUpHandler);
			}

			private function closePopUp():void
			{
				toggleButton.selected=false;
				removeListeners();
				popUpList.dataProvider=null;
				popUpList.close();
			}

			private function sizePopUp():void
			{
				if (popUpList)
				{
					popUpList.width=FlexGlobals.topLevelApplication.width - 40;
					popUpList.height=Math.min(dataProvider.length * 90, FlexGlobals.topLevelApplication.height - 40);
					popUpList.x=FlexGlobals.topLevelApplication.width / 2 - popUpList.width / 2;
					popUpList.y=FlexGlobals.topLevelApplication.height / 2 - popUpList.height / 2;
				}
			}


			//
			// Event Handlers
			//




			protected function stageClickHandler(event:MouseEvent):void
			{
				removeListeners();
			}

			protected function popUpListChangeHandler(event:IndexChangeEvent):void
			{
				var data:Object=(popUpList.selectListDisplay.selectedItem);

				// Remove focus from the TextInput so that the software keyboard closes
				stage.focus=null;

				// Set the value the user selected
				selectedItem=data;

				// Close it
				closePopUp();
			}

			/**
			 * Handler for listening to device key events.
			 */
			protected function deviceKeyUpHandler(event:KeyboardEvent):void
			{
				var key:uint=event.keyCode;

				if (key == Keyboard.BACK)
				{
					event.stopImmediatePropagation();
					event.stopPropagation();

					closePopUp();
				}
			}

			protected function resizeHandler(event:ResizeEvent):void
			{
				sizePopUp();
			}


			protected function toggleButton_clickHandler(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				event.stopPropagation();

				popUpList=new MultiSelectList();
				sizePopUp();
				popUpList.dataProvider=dataProvider;

				// Listeners
				addListeners();
				popUpList.open(FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
			}
		]]>
	</fx:Script>

	<s:ToggleButton id="toggleButton"
					label="{text}"
					width="100%"
					height="100%"
					skinClass="skins.buttons.ComboBoxToggleButtonSkin"
					click="toggleButton_clickHandler(event)"/>

</s:Group>
