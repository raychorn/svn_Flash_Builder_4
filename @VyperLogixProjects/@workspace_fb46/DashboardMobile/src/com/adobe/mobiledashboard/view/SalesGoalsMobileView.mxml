<?xml version="1.0" encoding="utf-8"?>
<s:View preinitialize="preinitializeHandler()"
		viewDeactivate="viewDeactivateHandler()"
		viewActivate="viewActivateHandler()"
		actionBarVisible.portrait="true"
		actionBarVisible.landscape="true"
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="Sales Goals"
		xmlns:components="com.adobe.mobiledashboard.view.components.*"
		xmlns:ns="com.adobe.mobiledashboard.view.charts_bak.*"
		xmlns:charts="com.adobe.dashboard.view.charts.*"
		xmlns:renderer="com.adobe.mobiledashboard.view.renderer.*">

	<fx:Script>
		<![CDATA[
			import assets.images.area_char_icon_on;
			import assets.images.area_chart_icon_off;
			import assets.images.bar_chart_vert_icon_on;
			import assets.images.listing_icon_off;
			import assets.images.listing_icon_on;

			import com.adobe.dashboard.enum.ChartTypeEnum;
			import com.adobe.dashboard.enum.DateRangeEnum;
			import com.adobe.dashboard.model.AppModel;
			import com.adobe.dashboard.model.DateRangeModel;
			import com.adobe.dashboard.presenter.SalesGoalsPresenter;

			import mx.events.CloseEvent;
			import mx.events.PropertyChangeEvent;

			[Bindable]
			private var presenter:SalesGoalsPresenter;

			[Bindable]
			protected var selectedOption:Object;

			private var gestureScaleX:Number=1;

			private var gesturePanX:Number=0;

			private var gesturePanY:Number=0;



			private function addListeners():void
			{
				presenter.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, presenterPropertyChangeHandler, false, 0, true);
				presenter.chartDetailsPresenter.addEventListener(Event.CHANGE, dataChangeHandler, false, 0, true);
			}

			private function removeListeners():void
			{
				if (presenter && presenter.chartDetailsPresenter && presenter.chartDetailsPresenter.hasEventListener(Event.CHANGE))
				{
					presenter.chartDetailsPresenter.removeEventListener(Event.CHANGE, dataChangeHandler);
				}
			}



			//
			// Event Handlers
			//

			protected function preinitializeHandler():void
			{
				presenter=AppModel.getInstance().salesGoalsPresenter;
				setComboBoxSelectedItem();

			}



			protected function viewActivateHandler():void
			{
				addListeners();
				if (presenter.dateRange == null || presenter.dateRange == "")
				{
					presenter.dateRange=DateRangeEnum.MONTH;
				}
				// Help with smooth animation by waiting till View Activate to load chart data
				presenter.loadChartData(presenter.dateRange, presenter.dateRangeStartDate, presenter.dateRangeStartDate);
			}

			protected function viewDeactivateHandler():void
			{
				removeListeners();
			}

			protected function dataChangeHandler(event:Event):void
			{
				loadingMessageDisplay.visible=false;
				chartDisplay.visible=true;
				chartDisplay.includeInLayout=true;

			}

			protected function presenterPropertyChangeHandler(event:PropertyChangeEvent):void
			{
				if (event.property == "dateRange")
				{
					setSelectedButton();

				}
				if (event.property == "dateRangeSelectorList")
				{
					setComboBoxSelectedItem();
				}

			}

			protected function areaChartButton_clickHandler(event:MouseEvent):void
			{
				event.stopPropagation();
				event.stopImmediatePropagation();

				if (presenter.chartDetailsPresenter && presenter.chartDetailsPresenter.chartModel)
				{
					presenter.chartDetailsPresenter.chartModel.chartType=ChartTypeEnum.AREA_CHART;
					presenter.isAreaChart=true;
				}
			}


			protected function lineChartButton_clickHandler(event:MouseEvent):void
			{
				event.stopPropagation();
				event.stopImmediatePropagation();

				if (presenter.chartDetailsPresenter && presenter.chartDetailsPresenter.chartModel)
				{
					presenter.chartDetailsPresenter.chartModel.chartType=ChartTypeEnum.LINE_CHART;
					presenter.isAreaChart=false;
				}
			}


			private function setSelectedButton():void
			{
				if (!monthButton || !quarterButton || !yearButton)
				{
					return;
				}

				switch (presenter.dateRange)
				{
					case DateRangeEnum.MONTH:
					{
						monthButton.selected=true;
						quarterButton.selected=false;
						yearButton.selected=false;
						break;
					}
					case DateRangeEnum.QUARTER:
					{
						monthButton.selected=false;
						quarterButton.selected=true;
						yearButton.selected=false;
						break;
					}
					case DateRangeEnum.YEAR:
					{
						monthButton.selected=false;
						quarterButton.selected=false;
						yearButton.selected=true;
						break;
					}
					default:
					{
						// do nothing
						break;
					}

				}

			}

			protected function setComboBoxSelectedItem():void
			{
				if (presenter && presenter.dateRangeSelectorList && presenter.dateRangeSelectorList.length)
				{
					selectedOption=presenter.dateRangeSelectorList.getItemAt(0);
				}
			}

			protected function monthButton_clickHandler(event:MouseEvent):void
			{
				event.stopPropagation();
				event.stopImmediatePropagation();

				presenter.dateRange=DateRangeEnum.MONTH;
				presenter.loadChartData(DateRangeEnum.MONTH, presenter.dateRangeStartDate, presenter.dateRangeStartDate);
			}

			protected function quarterButton_clickHandler(event:MouseEvent):void
			{
				event.stopPropagation();
				event.stopImmediatePropagation();

				presenter.dateRange=DateRangeEnum.QUARTER;
				presenter.loadChartData(DateRangeEnum.QUARTER, presenter.dateRangeStartDate, presenter.dateRangeStartDate);
			}

			protected function yearButton_clickHandler(event:MouseEvent):void
			{
				event.stopPropagation();
				event.stopImmediatePropagation();

				presenter.dateRange=DateRangeEnum.YEAR;
				presenter.loadChartData(DateRangeEnum.YEAR, presenter.dateRangeStartDate, presenter.dateRangeStartDate);
			}


			protected function multiSelect_changeHandler(event:Event):void
			{
				var data:DateRangeModel=DateRangeModel(multiSelect.selectedItem);
				presenter.dateRangeStartDate=data.startDate;

				presenter.loadChartData(presenter.dateRange, presenter.dateRangeStartDate, presenter.dateRangeStartDate);
			}

			protected function detailsButton_clickHandler(event:MouseEvent):void
			{
				detailsButton.setStyle("icon", listing_icon_on);
				presenter.goDetails();
			}

			protected function details_enterStateHandler():void
			{
				setSelectedButton();
			}

			protected function tourTip_closeHandler(event:CloseEvent):void
			{
				presenter.hideTourTip();
			}
		]]>
	</fx:Script>

	<!-- framework changes state on device rotation -->
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landscape"/>
	</s:states>

	<!-- top header background -->
	<s:Rect width="100%"
			height="120"
			includeIn="portrait">
		<s:fill>
			<s:SolidColor color="0x232323"/>
		</s:fill>
	</s:Rect>

	<s:Rect y="60"
			width="100%"
			height="1">
		<s:fill>
			<s:SolidColor color="0x0C0C0C"/>
		</s:fill>
	</s:Rect>



	<!-- toggle buttons -->
	<s:HGroup height="60"
			  left="10"
			  right="10"
			  horizontalAlign="center"
			  verticalAlign="middle"
			  includeIn="portrait"
			  gap="0">

		<s:ToggleButton id="monthButton"
						width="100%"
						height="40"
						label="Month"
						click="monthButton_clickHandler(event)"
						selected="{presenter.dateRange == DateRangeEnum.MONTH}"
						skinClass="skins.buttons.NavToggleButtonSkin"/>
		<s:ToggleButton id="quarterButton"
						width="100%"
						height="40"
						label="Quarter"
						click="quarterButton_clickHandler(event)"
						selected="{presenter.dateRange == DateRangeEnum.QUARTER}"
						skinClass="skins.buttons.NavToggleButtonSkin"/>
		<s:ToggleButton id="yearButton"
						width="100%"
						height="40"
						label="Year"
						click="yearButton_clickHandler(event)"
						selected="{presenter.dateRange == DateRangeEnum.YEAR}"
						skinClass="skins.buttons.NavToggleButtonSkin"/>
	</s:HGroup>
	<!-- chart controls -->
	<s:Group y="61"
			 height="60"
			 left="10"
			 right="10"
			 includeIn="portrait">

		<components:MultiSelectComponent id="multiSelect"
										 height="40"
										 left="0"
										 right="70"
										 verticalCenter="0"
										 dataProvider="{presenter.dateRangeSelectorList}"
										 change="multiSelect_changeHandler(event)"
										 text="{selectedOption.label}"
										 visible="{presenter.dateRange != DateRangeEnum.YEAR}"/>

		<s:Button id="detailsButton"
				  width="60"
				  height="40"
				  right="0"
				  verticalCenter="0"
				  click="detailsButton_clickHandler(event)"
				  label="List"
				  skinClass="skins.buttons.NavToggleButtonSkin"/>

	</s:Group>

	<!-- chart -->
	<charts:SalesGoalsChart id="chartDisplay"
							left.landscape="0"
							left.portrait="20"
							right.landscape="0"
							right.portrait="20"
							top.landscape="0"
							top.portrait="121"
							bottom.landscape="0"
							bottom.portrait="30"
							includeInLayout="false"
							click="detailsButton_clickHandler(event)"
							visible="false"
							chartPresenter="{presenter.chartDetailsPresenter}"/>

	<!-- used for capturing gestures -->
	<s:Group id="trackPad"
			 left="20"
			 right="20"
			 top="150"
			 bottom="30"/>

	<!-- loading message -->
	<s:VGroup id="loadingMessageDisplay"
			  horizontalCenter="0"
			  verticalCenter="0"
			  horizontalAlign="center">
		<s:BusyIndicator id="loadingIndicator"
						 symbolColor="#ffffff"
						 width="30"
						 height="30"/>
		<s:Label text="Building Chart"
				 color="#ffffff"/>
	</s:VGroup>

	<components:TourTip id="tourTip"
						bottom="5"
						horizontalCenter="0"
						message="Click Chart Areas for Details"
						visible="{presenter.showTourTip}"
						close="tourTip_closeHandler(event)"
						showArrow="false"/>

	<!-- the title content for this view -->
	<s:titleContent>
		<s:Label styleName="titleWhiteStyle"
				 text="Sales Goals"/>
	</s:titleContent>



</s:View>
