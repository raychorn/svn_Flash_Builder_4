<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication initialize="initializeHandler()"
							preinitialize="preinitializeHandler()"
							xmlns:fx="http://ns.adobe.com/mxml/2009"
							xmlns:mx="library://ns.adobe.com/flex/mx"
							xmlns:s="library://ns.adobe.com/flex/spark"
							xmlns:charts="mx.charts.*"
							xmlns:series="mx.charts.series.*"
							runtimeDPIProvider="com.adobe.mobiledashboard.util.CustomRuntimeDPIProvider"
							firstView="com.adobe.mobiledashboard.view.HomeView"
							splashScreenImage="@Embed(source='assets/images/splash.jpg')"
							splashScreenScaleMode="zoom"
							activate="activateHandler(event)"
							applicationDPI="240">

	<fx:Script>
		<![CDATA[
			import assets.images.home_icon_minimal;

			import com.adobe.dashboard.control.AppController;
			import com.adobe.dashboard.enum.StateEnum;
			import com.adobe.dashboard.event.NavigationEvent;
			import com.adobe.dashboard.model.AppModel;
			import com.adobe.dashboard.presenter.MainPresenter;
			import com.adobe.mobiledashboard.view.*;

			/**
			 * Instance of the presenter (presentation model) for this view.
			 * The presenter is used to communicate with the controller.  The same presenter
			 * is used for both the mobile and web apps.
			 */
			public var presenter:MainPresenter;

			/**
			 * Instance of the app controller that is created once for this app during init
			 */
			private var appController:AppController;



			//
			// Private Methods
			//

			private function addPresenterEventListeners():void
			{
				presenter.addEventListener(NavigationEvent.GO_STATE_EVENT, goStateHandler, false, 0, true);
			}


			//
			// Event Handlers
			//

			/**
			 * Listen for application state changes and translate the state string name into
			 * modifying the navigator stack via a case statement.
			 */
			protected function goStateHandler(event:NavigationEvent):void
			{
				if (event.doPop)
				{
					// If the request to go back in the stack then pop instead of push
					if (navigator.length > 1)
						navigator.popView();

					return;
				}

				switch (event.state)
				{
					case StateEnum.HOME_STATE:
						navigator.popToFirstView();
						break;
					case StateEnum.SALES_GOALS_STATE:
						navigator.pushView(SalesGoalsMobileView);
						break;
					case StateEnum.SALES_GOALS_DETAILS_STATE:
						navigator.pushView(SalesGoalsDetailsMobileView);
						break;
					case StateEnum.AVERAGE_REVENUE_PER_SALE_STATE:
						navigator.pushView(AverageRevenueMobileView);
						break;
					case StateEnum.AVERAGE_REVENUE_PER_SALE_DETAILS_STATE:
						navigator.pushView(AverageRevenueDetailsMobileView);
						break;
					case StateEnum.SALES_PIPELINE_STATE:
						navigator.pushView(SalesPipelineMobileView);
						break;
					case StateEnum.SALES_PIPELINE_DETAILS_STATE:
						navigator.pushView(SalesPipelineDetailsMobileView);
						break;


				}
			}

			protected function preinitializeHandler():void
			{
				// Build the AppController
				appController=new AppController(true);

				// Set (Inject) the presentation model
				presenter=AppModel.getInstance().mainPresenter;

				// Add Listeners
				addPresenterEventListeners();
			}

			protected function initializeHandler():void
			{
				// Set up the services
				presenter.setUp();
			}

			protected function activateHandler(event:Event):void
			{
				appController.onAppActivated();
			}

			/**
			 * Back button enablement: Only enabled on certain platforms
			 */
			protected function shouldDisplayBackButton():Boolean
			{
				var isAndroid:Boolean=Capabilities.version.indexOf('AND') > -1;

				return !isAndroid;
			}

			protected function shouldDisplayHomeButton():Boolean
			{
				var isAndroid:Boolean=Capabilities.version.indexOf('AND') > -1;

				return !isAndroid;
			}

			protected function goBackHandler():void
			{
				if (navigator.length > 1)
					navigator.popView();
			}
		]]>
	</fx:Script>

	<fx:Style source="assets/styles/styles.css"/>

	<!-- default navigation button for app -->
	<s:navigationContent>
		<s:Button id="backButton"
				  click="goBackHandler()"
				  label="Back"
				  includeInLayout="{shouldDisplayBackButton()?navigator.length>1:false}"
				  visible="{backButton.includeInLayout}"/>

		<s:Button id="logoButton"
				  width="100%"
				  height="100%"
				  icon="{home_icon_minimal}"
				  click="presenter.goHome()"
				  includeInLayout="{!backButton.visible?navigator.length>1:false}"
				  visible="{logoButton.includeInLayout}"/>

	</s:navigationContent>

</s:ViewNavigatorApplication>
