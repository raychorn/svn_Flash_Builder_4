/* * This file is part of Flowplayer, http://flowplayer.org * * By: Daniel Rossi, <electroteque@gmail.com>, Anssi Piirainen Flowplayer Oy * Copyright (c) 2009 Electroteque Multimedia, Flowplayer Oy * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */ package org.flowplayer.youtube {	/**	 * @author api	 */	public class Config {		private var _apiPlayerURL:String = "http://www.youtube.com/apiplayer?version=3";		private var _gdataApiURL:String = "http://gdata.youtube.com/feeds/api/videos/";		private var _gdataApiVersion:String = "2";		private var _gdataApiFormat:String = "5";				private var _defaultQuality:String = "default";				private var _enableGdata:Boolean = false;				private var _bitratesOnStart:Boolean = false;				private var _videoFormats:Object = {			'small': {fmt: "5", label: "FLV Lowest Quality", shortlabel: "FLV", vq: 1, fmt_map: "", type: "video/x-flv", qid: 1, width: 320, height: 240, bitrate: 64},            //'18': {fmt: "18", label: "MP4 480x270p 18", shortlabel: "18", vq: 2, fmt_map: "18/512000/9/0/115", type: "video/mp4", qid: 2, width: 480, height: 270, bitrate: 512},            'medium': {fmt: "34", label: "FLV 640x360p 34", shortlabel: "34", vq: 2, fmt_map: "34/512000/9/0/115", type: "video/x-flv", qid: 3, width: 640, height: 360, bitrate: 512},            'large': {fmt: "35", label: "FLV 854x480p 35", shortlabel: "35", vq: 2, fmt_map: "35/640000/9/0/115", type: "video/x-flv", qid: 4, width: 854, height: 480, bitrate: 640},            'hd720': {fmt: "22", label: "MP4 1280x720p 22", shortlabel: "22", vq: 2, fmt_map: "22/2000000/9/0/115", type: "video/mp4", qid: 5, width: 1280, height: 720, bitrate: 20000},            'hd1080': {fmt: "37", label: "MP4 Highest Quality 1920x1080p 37", shortlabel: "37", vq: 2, fmt_map: "37/4000000/9/0/115", type: "video/mp4", qid: 6, width: 1920, height: 1080, bitrate: 40000}                         		};				public function get enableGdata():Boolean {			return _enableGdata;		}				public function set enableGdata(enable:Boolean):void {			_enableGdata = enable;		}				public function get apiPlayerURL():String {			return _apiPlayerURL;		}				public function set apiPlayerURL(url:String):void {			_apiPlayerURL = url;		}				public function get gdataApiURL():String {			return _gdataApiURL;		}				public function set gdataApiURL(url:String):void {			_gdataApiURL = url;		}				public function get gdataApiVersion():String {			return _gdataApiVersion;		}				public function set gdataApiVersion(version:String):void {			_gdataApiVersion = version;		}				public function get gdataApiFormat():String {			return _gdataApiFormat;		}				public function set gdataApiFormat(url:String):void {			_gdataApiFormat = url;		}				public function get defaultQuality():String {			return _defaultQuality;		}				public function set defaultQuality(quality:String):void {			_defaultQuality = quality;		}				public function get videoFormats():Object {			return _videoFormats;		}				public function get bitratesOnStart():Boolean {			return _bitratesOnStart;		}				public function set bitratesOnStart(enable:Boolean):void {			_bitratesOnStart = enable;		}	}}