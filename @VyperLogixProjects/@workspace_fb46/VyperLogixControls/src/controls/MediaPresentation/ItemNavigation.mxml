<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  width="100%" height="100%" paddingTop="5"
		  xmlns:components="views.components.*" 
 xmlns:MediaPresentation="controls.MediaPresentation.*" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import spark.components.Button;
			import spark.events.IndexChangeEvent;
			
			public function get_button_bar_by_label(label:String):* {
				var children:Array = this.btnBarNav.getChidren;
				var i:int = this.btnBarNav.getIndexFor(label);
				return children[i];
			}

			public function show_items_tiles():void {
				this.tiles.visible = this.tiles.includeInLayout = true;
			}
			
			public function hide_items_tiles():void {
				this.tiles.visible = this.tiles.includeInLayout = false;
			}
			
			public function get is_items_tiles_showing():Boolean {
				return this.tiles.visible;
			}
			
			private function selectionChangingHandler(event:IndexChangeEvent):void {
//				var target:List = event.currentTarget as List;
//				var item:* = target.dataProvider.getItemAt(event.newIndex);
//				if (item.type != "employee") {
//					event.preventDefault();
//				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup id="hgroup_nav" width="100%">
		<s:HGroup width="20%" horizontalAlign="left">
			<s:HGroup id="hgroup_counter" width="100%" paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label id="tabNum"/>
				<s:Label text="." visible="{this.tabNum.visible}" includeInLayout="{this.tabNum.includeInLayout}"/>
				<s:Label id="counter"/>
				<s:Label text="::"/>
				<s:Label id="total"/>
			</s:HGroup>
		</s:HGroup>
		<s:HGroup width="80%" paddingTop="-5" horizontalAlign="center">
			<MediaPresentation:CustomButtonBar 
				id="btnBarNav" 
				labelField="label" 
				width="100%" 
				/>
		</s:HGroup>
	</s:HGroup>
	<s:HGroup id="tiles" width="100%" height="100%" visible="false" includeInLayout="false">
		<s:List id="items" width="100%" height="120" labelField="title" changing="selectionChangingHandler(event);">
			<s:layout>
				<s:TileLayout requestedRowCount="1" 
							  rowAlign="justifyUsingHeight" 
							  columnAlign="justifyUsingWidth" 
							  horizontalGap="2" 
							  verticalGap="2" 
							  horizontalAlign="center" 
							  verticalAlign="top"/>
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<fx:Script>
							<![CDATA[
								import com.ObjectUtils;
								import com.StringUtils;
								
								import controls.labels.TileLabel;
								
								import mx.events.FlexEvent;

								protected function vgroup1_creationCompleteHandler(event:FlexEvent):void {
									var label:TileLabel;
									var _label:TileLabel;
									var aKey:String;
									var _aKey:String;
									var datum:*;
									var _datum:*;
									var _keys:Array;
									var keys:Array = ObjectUtils.keys(data);
									var target:VGroup = event.currentTarget as VGroup;
									for (var i:int = 0; i < keys.length; i++) {
										aKey = keys[i];
										label = new TileLabel();
										label.id = 'tilelabel_'+data.name;
										label.label.styleName = 'SmallBoldText';
										label.label.text = StringUtils.capitalize(aKey)+':';
										datum = data[aKey];
										_keys = ObjectUtils.keys(datum);
										if (_keys.length > 0) {
											for (var n:int = 0; n < _keys.length; n++) {
												_aKey = _keys[n];
												_label = new TileLabel();
												_label.id = 'tilelabel_'+data.name+'_'+aKey+'_'+_aKey;
												_label.label.text = StringUtils.capitalize(aKey)+'.'+StringUtils.capitalize(_aKey)+':';
												_label.label.styleName = 'SmallBoldText';
												_datum = data[aKey][_aKey];
												_label.text.text = _datum;
												_label.text.styleName = 'SmallText';
												target.addElement(_label);
											}
										} else {
											label.text.text = datum;
											label.text.styleName = 'SmallText';
											target.addElement(label);
										}
									}
								}
								
							]]>
						</fx:Script>
						<s:states>
							<mx:State name="normal" />
							<mx:State name="hovered" />
							<mx:State name="selected" />
						</s:states>
						<s:Rect left="0" right="0" top="0" bottom="0">
							<s:stroke>
								<mx:SolidColorStroke color="0xCCCCCC" joints="round" weight="2"/>
							</s:stroke>
							<s:fill>
								<mx:SolidColor color="0x999999" alpha="0" alpha.hovered="0.2"
											  alpha.selected="0.6" />
							</s:fill>
						</s:Rect>
						<s:VGroup width="100%" creationComplete="vgroup1_creationCompleteHandler(event)">
						</s:VGroup>
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
	</s:HGroup>
</s:VGroup>
