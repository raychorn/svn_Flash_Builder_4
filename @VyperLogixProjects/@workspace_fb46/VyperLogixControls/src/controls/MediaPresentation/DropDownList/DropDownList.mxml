<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" 
		  currentState="closed" xmlns:mx="library://ns.adobe.com/flex/mx">
	<s:states>
		<mx:State name="open"/>
		<mx:State name="closed"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="selectedTabFromList", type="controls.MediaPresentation.DropDownList.events.SelectedTabFromListEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import controls.MediaPresentation.DropDownList.events.SelectedTabFromListEvent;
			
			[Bindable]
			[Embed(source="/controls/MediaPresentation/assets/buttons/drop-down-arrow-16x16.png")]
			public static var dropDownIcon16x16Class:Class;
			
			[Bindable]
			private var __popup__:PopUpList;
			
			[Bindable]
			private var __dataProvider__:ArrayCollection;
			
			[Bindable]
			private var __labelField__:String;
			
			[Bindable]
			private var __selectedItem__:Object;
			
			[Bindable]
			private var __selectedLabel__:String;
			
			private var __timer__:Timer;
			
			public function get selectedItem():* {
				return this.__selectedItem__;
			}
			
			public function set selectedItem(selectedItem:*):void {
				if (this.__selectedItem__ != selectedItem) {
					this.__selectedItem__ = selectedItem;
					if (this.label) {
						this.label.text = selectedItem[this.selectedLabel];
					}
				}
			}
			
			public function get selectedLabel():String {
				return this.__selectedLabel__;
			}
			
			public function set selectedLabel(label:String):void {
				if (this.__selectedLabel__ != label) {
					this.__selectedLabel__ = label;
				}
			}
			
			public function get labelField():String {
				return this.__labelField__;
			}
			
			public function set labelField(labelField:String):void {
				if (this.__labelField__ != labelField) {
					this.__labelField__ = labelField;
				}
			}
			
			public function get dataProvider():ArrayCollection {
				return this.__dataProvider__;
			}
			
			public function set dataProvider(dataProvider:ArrayCollection):void {
				if (this.__dataProvider__ != dataProvider) {
					this.__dataProvider__ = dataProvider;
				}
			}
			
			private function dismiss():void {
				trace('dismiss::popup.1 --> !!!');
				PopUpManager.removePopUp(this.__popup__);
				this.__popup__ = null;
				this.currentState = 'closed';
				this.__timer__.stop();
			}
			
			private function open_dropdown():void {
				var _this:DropDownList = this;
				this.__timer__ = new Timer(15000,1);
				var pt:Point = new Point(this.canvas.x,this.canvas.y);
				var pt2:Point = this.canvas.localToGlobal(pt);
				this.__popup__ = PopUpManager.createPopUp(this,PopUpList,false) as PopUpList;
				this.__popup__.x = pt2.x+this.btnOpen.width+5;
				this.__popup__.y = pt2.y+this.height+5;
				this.__popup__.width = this.canvas.width;
				this.__popup__.height = 300;
				this.__popup__.list.addEventListener(SelectedTabFromListEvent.TYPE_SELECTED_TAB_FROM_LIST, 
					function (event:SelectedTabFromListEvent):void {
						var item:* = event.item;
						var timer:Timer = new Timer(500,1);
						timer.addEventListener(TimerEvent.TIMER_COMPLETE, 
							function (event:TimerEvent):void {
								timer.stop();
								dismiss();
								trace('dispatchEvent.1 --> SelectedTabFromListEvent.TYPE_SELECTED_TAB_FROM_LIST !!!');
								_this.dispatchEvent(new SelectedTabFromListEvent(SelectedTabFromListEvent.TYPE_SELECTED_TAB_FROM_LIST,item))
							}
						);
						timer.start();
					}
				);
				this.__popup__.addEventListener(FlexEvent.CREATION_COMPLETE, 
					function (event:FlexEvent):void {
						_this.__popup__.dataProvider = _this.__dataProvider__;
						_this.__popup__.labelField = _this.__labelField__;
						_this.__popup__.selectedItem = _this.__selectedItem__;
						_this.currentState = 'open';
					}
				);
				this.__timer__.addEventListener(TimerEvent.TIMER_COMPLETE, 
					function (event:TimerEvent):void {
						dismiss();
					}
				);
				this.__timer__.start();
			}
			
			protected function btnOpen_clickHandler(event:MouseEvent):void {
				this.open_dropdown();
			}
			
			protected function btnClose_clickHandler(event:MouseEvent):void {
				this.dismiss();
			}
			
			protected function label_clickHandler(event:MouseEvent):void {
				if (this.__timer__.running) {
					this.dismiss();
				} else {
					this.open_dropdown();
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%">
		<s:HGroup id="canvas" width="100%" horizontalAlign="right" paddingTop="10" paddingLeft="5" paddingBottom="5">
			<s:Label id="label" text="Choose a Tab..." click="label_clickHandler(event)"/>
		</s:HGroup>
		<s:Button id="btnOpen" 
				  icon="{dropDownIcon16x16Class}" 
				  width="30" height="30" 
				  enabled.closed="true" enabled.open="false"
				  visible.closed="true" includeInLayout.closed="true" 
				  visible.open="false" includeInLayout.open="false" 
				  click="btnOpen_clickHandler(event)"/>
		<s:Button id="btnClose" 
				  icon="{dropDownIcon16x16Class}" 
				  width="30" height="30" 
				  enabled.closed="false" enabled.open="true"
				  visible.closed="false" includeInLayout.closed="false" 
				  visible.open="true" includeInLayout.open="true" 
				  click="btnClose_clickHandler(event)"/>
	</s:HGroup>
</s:VGroup>
