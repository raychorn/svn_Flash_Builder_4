/***************************** Manuel Gonzalez           ** design@stheory.com        ** www.stheory.com           ** www.codingcolor.com       ******************************/package com.video{	import flash.display.*;	import flash.events.MouseEvent;	import flash.events.Event;			public class VideoPlayerControls extends Sprite{						public static  const ON_PLAYBACK_STATE_CHANGE:String = "ON_PLAYBACK_STATE_CHANGE";		public static  const ON_SOUND_CHANGE:String = "ON_SOUND_CHANGE";		public static  const ON_SEEK_CHANGE:String = "ON_SEEK_CHANGE";				private var playbackControl:MovieClip;		private var loadProgessBar:MovieClip;		private var scrubControl:MovieClip;		private var volumeControl:MovieClip;		private var muteControl:MovieClip;		private var vidWidth:Number;		private var vidHeight:Number;				public function set videoWidth(inNum:Number):void		{			 vidWidth=inNum;		}		public function get videoWidth():Number		{			 return vidWidth;		}		public function set videoHeight(inNum:Number):void		{			vidHeight =inNum;		}		public function get videoHeight():Number		{			return vidHeight;		}		public function VideoPlayerControls(){}		/*		Method: init		Parameters:		Returns:		*/		public function init():void		{			createPlayPauseButton();			createMuteButton();			createVideoLoadBar();			createScrubControl();			adjustLayout( vidWidth,vidHeight)		}		/*		Method: setLoadingProgress		Parameters:		inObj:Object		Returns:		*/		public function setLoadingProgress(inObj:Object):void		{			loadProgessBar.byteLoaded = inObj.bytes;			loadProgessBar.byteTotal = inObj.total;		}		/*		Method:setVolumeControl		Parameters:		inNum:Number		Returns:		*/		public function setVolumeControl(inNum:Number):void		{			 volumeControl.curVolume = inNum;		}		/*		Method: setMuteControl		Parameters:		inBool:Boolean		Returns:		*/		public function setMuteControl(inBool:Boolean):void{			muteControl.isMuted = inBool;		}		/*		Method: setPlayPauseControls		Parameters:		inNum:Number		Returns:		*/		public function setPlayPauseControls(inNum:Number):void		{			if(inNum == 0){				playbackControl.buttonState="play";			}else if(inNum == 1){				playbackControl.buttonState="pause";			}		}		/*		Method: setSeekDuration		Parameters:		inNum:Number		Returns:		*/		public function setSeekDuration(inNum:Number):void		{			scrubControl.durr = inNum;		}		/*		Method: setSeekCurrentTime		Parameters:		inNum:Number		Returns:		*/		public function setSeekCurrentTime(inNum:Number):void		{			scrubControl.currTime = inNum;		}		/*		Method: adjustLayout		Parameters:		inW:Number		inH:Number		Returns:		*/		public function adjustLayout(inW:Number,inH:Number):void		{			playbackControl.x=0;			loadProgessBar.x = (playbackControl.x + playbackControl.width)+10;			loadProgessBar.y = playbackControl.height/2 - loadProgessBar.height/2;			scrubControl.x = loadProgessBar.x;			scrubControl.y = loadProgessBar.y;			muteControl.x = inW - muteControl.width					}		/*		Method: createScrubControl		Parameters:		Returns:		*/		private function createScrubControl():void		{			scrubControl = new VideoScrubber();			scrubControl.addEventListener(Event.CHANGE,onSeek);			addChild(scrubControl);		}		/*		Method:createMuteButton		Parameters:		Returns:		*/		private function createMuteButton():void		{			muteControl = new MuteControlButton();			muteControl.addEventListener(Event.CHANGE,setMuteState);			addChild(muteControl);		}		/*		Method: createVideoLoadBar		Parameters:		Returns:		*/		private function createVideoLoadBar():void		{			loadProgessBar = new VideoProgressBar();			addChild(loadProgessBar)		}		/*		Method: createPlayPauseButton		Parameters:		Returns:		*/		private function createPlayPauseButton():void		{			playbackControl = new PlayPauseButton();			playbackControl.addEventListener(Event.CHANGE,setPlaybackState);			addChild(playbackControl);		}		/*		Method:createVolumeSliderControl		Parameters:		Returns:		*/		private function createVolumeSliderControl():void		{			volumeControl = new VolumeSliderControl();			volumeControl.addEventListener(Event.CHANGE,adjustPlayerVolume);			addChild(volumeControl)					}				/*		Method:createVolumeBarControl		Parameters:		Returns:		*/		private function createVolumeBarControl():void		{			volumeControl = new VolumeBarControl();			volumeControl.addEventListener(Event.CHANGE,adjustPlayerVolume);			addChild(volumeControl)					}		/*		Method:adjustPlayerVolume		Parameters:		event:Event		Returns:		*/		private function adjustPlayerVolume(event:Event):void		{			var evtObj:Object = {state:"adjust_volume", val:volumeControl.curVolume}			dispatchEvent(new VideoControlsEvent(evtObj,ON_SOUND_CHANGE));		}		/*		Method:setPlaybackState		Parameters:		event:Event		Returns:		*/		private function setPlaybackState(event:Event):void		{			var evtObj:Object = {state:playbackControl.buttonState}			dispatchEvent(new VideoControlsEvent(evtObj,ON_PLAYBACK_STATE_CHANGE));		}		/*		Method:setMuteState		Parameters:		event:Event		Returns:		*/		private function setMuteState(event:Event):void		{			var type:String;			if(muteControl.isMuted){				type = "mute";			}else{				type = "unmute";			}			var evtObj:Object = {state:type};			dispatchEvent(new VideoControlsEvent(evtObj,ON_SOUND_CHANGE));		}		/*		Method: onSeek		Parameters:		event:Event		Returns:		*/		private function onSeek(event:Event):void		{			var evtObj:Object = {state:"seek",val:scrubControl.sec}			dispatchEvent(new VideoControlsEvent(evtObj,ON_PLAYBACK_STATE_CHANGE));		}					}					}