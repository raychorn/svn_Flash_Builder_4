/***************************** Manuel Gonzalez           ** design@stheory.com        ** www.stheory.com           ** www.codingcolor.com       ******************************/package com.view{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.events.Event;	public class Slider extends Sprite {		private var track:MovieClip;		private var trackH:Number;		private var marker:MovieClip;		private var percentage:Number = 0;		public function get trackHeight():Number {			return trackH;		}		public function get percent():Number {			return percentage;		}		public function set percent( p:Number ):void {			percentage = Math.min( 1, Math.max( 0, p ) );			marker.y = percentage * (track.height - marker.height);			dispatchEvent(new Event(Event.CHANGE));		}		/*Constructor*/		public function Slider() {			track = line;			trackH = track.height;			track.buttonMode = true;			track.addEventListener(MouseEvent.MOUSE_DOWN,trackPress);			marker = bar;			marker.buttonMode = true;			marker.addEventListener(MouseEvent.MOUSE_DOWN,markerPress);		}		/*		Method:stopSliding		Parameters:		event:MouseEvent		Returns:		*/		private function stopSliding( event:MouseEvent ):void {			marker.stopDrag();			stage.removeEventListener( MouseEvent.MOUSE_MOVE, updatePercent );			stage.removeEventListener( MouseEvent.MOUSE_UP, stopSliding );		}		/*		Method:updatePercent		Parameters:		event:MouseEvent		Returns:		*/		public function updatePercent( event:MouseEvent ):void {			event.updateAfterEvent();			percentage = marker.y / (track.height - marker.height);			dispatchEvent(new Event(Event.CHANGE));		}		/*		Method:markerPress		Parameters:		event:MouseEvent		Returns:		*/		public function markerPress( event:MouseEvent ):void {			marker.startDrag( false, new Rectangle( track.x, track.y, 0, track.height - marker.height ) );			stage.addEventListener( MouseEvent.MOUSE_MOVE, updatePercent );			stage.addEventListener( MouseEvent.MOUSE_UP, stopSliding );		}		/*		Method:trackPress		Parameters:		event:MouseEvent		Returns:		*/		public function trackPress(event:MouseEvent):void {			if (mouseY > track.height - marker.height) {				marker.y = track.height - marker.height;			} else if (mouseY < track.y + marker.height/2) {				marker.y =0;			} else {				marker.y = mouseY - marker.height/2;			}			percentage = marker.y / (track.height - marker.height);			dispatchEvent(new Event(Event.CHANGE));		}	}}