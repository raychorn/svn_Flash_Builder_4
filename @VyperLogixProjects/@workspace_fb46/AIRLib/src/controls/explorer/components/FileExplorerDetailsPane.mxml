<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  width="100%" height="100%" 
		  xmlns:labels="controls.labels.*" 
		  initialize="vgroup2_initializeHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="change", type="spark.events.IndexChangeEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import controls.explorer.FileExplorer;
			
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var _this:FileExplorerDetailsPane;
			
			protected function items_creationCompleteHandler(event:FlexEvent):void {
				var target:List = event.currentTarget as List;
				target.addEventListener(IndexChangeEvent.CHANGE, 
					function (event:IndexChangeEvent):void {
						_this.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE,event.bubbles,event.bubbles,event.oldIndex,event.newIndex));
					}
				);
			}
			
			protected function vgroup2_initializeHandler(event:FlexEvent):void {
				_this = this;
			}
			
		]]>
	</fx:Script>
	<s:List id="items" width="100%" height="100%" labelField="name" creationComplete="items_creationCompleteHandler(event)">
		<s:layout>
			<s:TileLayout rowAlign="justifyUsingHeight" 
						  columnAlign="justifyUsingWidth" 
						  horizontalGap="2" 
						  verticalGap="2" 
						  horizontalAlign="center" 
						  verticalAlign="top"/>
		</s:layout>
		<s:itemRenderer>
			<fx:Component>
				<s:ItemRenderer>
					<fx:Script>
						<![CDATA[
							import controls.explorer.FileExplorer;
							import controls.explorer.components.FileExplorerInfoSnapIn;
							import controls.labels.TileLabel;
							import controls.popups.NetflixPopUp;
							
							import mx.events.CloseEvent;
							import mx.events.FlexEvent;
							import mx.events.ResizeEvent;
							import mx.managers.PopUpManager;
							
							private var __popup__:NetflixPopUp;
							
							protected function vgroup1_creationCompleteHandler(event:FlexEvent):void {
								var target:VGroup = event.currentTarget as VGroup;
								try {
									if (data.icon) {
										var bitmap:Bitmap;
										if (iconImage) {
											iconImage.visible = iconImage.includeInLayout = false;
										}
//										for (var i:int = 0; i < data.icon.bitmaps.length; i++) {
//											bitmap = new Bitmap(data.icon.bitmaps[i]);
//											imageCanvas.addChild(bitmap);
//										}
										if (imageCanvas) {
											bitmap = new Bitmap(data.icon.bitmaps[0]);
											imageCanvas.addChild(bitmap);
										}
									} else {
										if (imageCanvas) {
											imageCanvas.visible = imageCanvas.includeInLayout = false;
										}
										if (iconImage) {
											iconImage.source = ((data.isDirectory) ? FileExplorer.folderIconClass : FileExplorer.documentIconClass);
										}
									}
								} catch (err:Error) {
									trace(err.toString()+'\n'+err.getStackTrace());
								}
								try {
									if (iconName) {
										iconName.label.text = data.name
									}
								} catch (err:Error) {}
								//trace('(+++) !!!');
							}
							
							protected function vgroup1_clickHandler(event:MouseEvent):void {
								var _this:* = this;
								if (!__popup__) {
									var target:VGroup = event.currentTarget as VGroup;
									var pt:Point = target.contentToGlobal(new Point(0,0));
									__popup__ = PopUpManager.createPopUp(target,NetflixPopUp,true) as NetflixPopUp;
									__popup__.x = pt.x;
									__popup__.y = pt.y;
									__popup__.width = 300;
									__popup__.height = 150;
									__popup__.styleName = 'NetflixPopUp';
									__popup__.arrow_color = 0xcccccc/2;
									__popup__.title = data.name;
									__popup__.addEventListener(ResizeEvent.RESIZE,
										function (event:ResizeEvent):void {
											var target:NetflixPopUp = event.currentTarget as NetflixPopUp;
											//trace('(+++).1 x='+target.x+', y='+target.y);
											//trace('(+++).2 width='+target.width+', height='+target.height);
											//trace('(+++).3 x+width='+(target.x+target.width)+', y+height='+(target.y+target.height));
											//trace('(+++).4 _this.width='+_this.parentApplication.width+', _this.height='+_this.parentApplication.height);
											//var ii:int = -1;
										}
									); 
									__popup__.addEventListener(FlexEvent.CREATION_COMPLETE, 
										function (event:FlexEvent):void {
											var exX:int = (__popup__.x - __popup__.width);
											var exWidth:int = __popup__.width/4;
											trace('(+++).111 --> __popup__.x='+__popup__.x+', exX='+exX+', exWidth='+exWidth+', width='+__popup__.width+', target.width='+target.width+', target.parentDocument.x='+target.parentDocument.x+', target.parentDocument.width='+target.parentDocument.width);
											if (exX > 0) {
												__popup__.x -= __popup__.width;
												trace('(+++).222');
											} else if (Math.abs(exX) < exWidth) {
												__popup__.x = 5;
												__popup__.width -= Math.abs(exX);
												__popup__.deltaX -= Math.abs(exX);
												trace('(+++).222a');
											} else if (__popup__.x < Math.abs(exX)) {
												var pt1:Point = target.contentToGlobal(new Point(0,0));
												var pt2:Point = target.contentToGlobal(new Point(target.parentDocument.width,0));
												__popup__.x = pt2.x+20;
												__popup__.use_arrow_left();
												trace('(+++).222b --> pt1='+pt1.toString()+', pt2='+pt2.toString());
											} else if ((__popup__.x + __popup__.width) < target.parentDocument.width) {
												__popup__.x += target.parentDocument.x+target.parentDocument.width;
												trace('(+++).333');
											}
											trace('(+++).444');
											var info:FileExplorerInfoSnapIn = new FileExplorerInfoSnapIn();
											info.width = 250;
											info.height = 150;
											info.currentState = 'label';
//											info.line1.label.text = 'NativePath:';
//											info.line1.textArea.text = data.nativePath;
//											info.line1.textArea.width = 200;
//											info.line1.textArea.height = 300;
//											info.line2.visible = info.line2.includeInLayout = false;
//											info.line3.visible = info.line3.includeInLayout = false;
											__popup__.infoCanvas.addElement(info);
											__popup__.btnClose.addEventListener(MouseEvent.CLICK, 
												function (event:MouseEvent):void {
													__popup__ = null;
													trace('vgroup1_clickHandler.popup.3 --> '+MouseEvent.CLICK);
												}
											);
											trace('vgroup1_clickHandler.popup.2 --> '+FlexEvent.CREATION_COMPLETE);
										}
									);
								}
								trace('vgroup1_clickHandler.1 --> currentState='+currentState);
							}
							
						]]>
					</fx:Script>
					<s:states>
						<mx:State name="normal" />
						<mx:State name="hovered" />
						<mx:State name="selected" />
					</s:states>
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:stroke>
							<mx:SolidColorStroke color="0xCCCCCC" joints="round" weight="2"/>
						</s:stroke>
						<s:fill>
							<mx:SolidColor color="0x999999" alpha="0.4" alpha.hovered="0.2"
										  alpha.selected="0.6" />
						</s:fill>
					</s:Rect>
					<s:VGroup width="100%" 
							  click="vgroup1_clickHandler(event)" 
							  creationComplete="vgroup1_creationCompleteHandler(event)">
						<s:HGroup width="100%">
							<s:HGroup paddingTop="5" paddingLeft="5">
								<s:Image id="iconImage"/>
								<s:SpriteVisualElement id="imageCanvas"/>
							</s:HGroup>
							<s:HGroup paddingTop="5" paddingLeft="5">
								<labels:TileLabel id="iconName" width="100%"/>
							</s:HGroup>
						</s:HGroup>
						<s:HGroup id="infoCanvas" width="100%" paddingTop="5" paddingLeft="5">
							<labels:TileLabel id="infoLabel" width="100%" height="100%"/>
						</s:HGroup>
					</s:VGroup>
				</s:ItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:VGroup>
