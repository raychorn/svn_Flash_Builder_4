<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark"  
					   xmlns:mx="library://ns.adobe.com/flex/mx" showStatusBar="false" 
					   xmlns:application="application.*" 
					   creationComplete="windowedapplication1_creationCompleteHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<s:State name="mainView"/>
		<s:State name="updaterView"/>
	</s:states>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel.ttf");
			fontFamily: NeoSansIntel;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Light.ttf");
			fontFamily: NeoSansIntelLight;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium2;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/CALIBRI.TTF");
			fontFamily: Calibri;
			embedAsCFF: false;
		}
		
		.splash_movie_canvas {
			backgroundColor: #ffffff;
		}
		
		.LoginPanel {
			borderStyle: none;
			borderColor: #3300ff;
			borderThickness: 3;
			roundedBottomCorners: true;
			cornerRadius: 8;
			headerHeight: 31;
			headerColors: #0033ff, #330099;
			backgroundColor: #ffffff;
			backgroundAlpha: 0.3;
			shadowDistance: 6;
			shadowDirection: right;
			titleStyleName: "LoginPanelTitle";
		}
		
		.LoginPanelTitle {
			fontFamily: Calibri;
			fontSize: 16;
		}
		
		.TreeNodeWithChildren {
			fontFamily: Calibri;
			fontSize: 11;
			fontWeight: bold;
			color: blue;
		}
		
		.TreeNodeWithNoChildren {
			fontFamily: Calibri;
			fontSize: 11;
			fontWeight: normal;
			color: black;
		}
		
		.ErrorMessages {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: red;
		}
		
		.NormalMessages {
			fontFamily: Calibri;
			fontSize: 14;
			color: black;
		}
		
		.ImportantMessage {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: blue;
		}
		
		.TermsAndConditionsHTML {
			fontFamily: NeoSansIntelLight;
			fontSize: 10;
			color: black;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import application.NativeApplicationUpdater;
			
			import com.CapabilitiesUtils;
			import com.EzHTTPService;
			import com.StringUtils;
			import com.adobe.serialization.json.JSON;
			
			import controls.Alert.AlertPopUp;
			import controls.AppIcon;
			import controls.crm.ReportProblems;
			import controls.forms.FormViewer;
			
			import flash.net.SharedObject;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.core.FlexGlobals;
			import mx.events.AIREvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.VideoDisplay;
			
			import utils.APIHelper;
			
			import views.PolymorphicViewer;
			
			import vyperlogix.FileIO.FileUpload;
			import vyperlogix.FileIO.events.*;
			import vyperlogix.views.events.*;
			
			public static var force_localHost:Boolean = true;
			
			[Bindable]
			public var is_debugging:Boolean = false;
			
			[Bindable]
			public var is_logoVisible:Boolean = false;
			
			public var __is_localhost__:Boolean = false;
			
			public static var problems:ReportProblems;
			
			public static var uploader:FileUpload;
			
			public var splashPopUp:*;

			public static var aViewer:PolymorphicViewer;

			public var _copyrightMessage:String;

			[Embed(source="assets/icons/icons/app_icon_128.png")]
			[Bindable]
			public var appLogoCls:Class;

			[Embed(source="assets/docs/terms/TermsAndConditions.html",mimeType="application/octet-stream")]
			[Bindable]
			public var TermsAndConditionsClass:Class;
			
			[Bindable]
			public var how_to_video_id:String = "WNyi0ER8pHc";
			public var how_to_video_url:String = "http://www.youtube-nocookie.com/v/'+how_to_video_id+'?fs=1&hl=en_US&hd=1";
			
			public var Languages:Object = {
				'English':'',
				'Spanish':'Spanish'
			};
			
			public static var const_view_fullscreen:String = 'view.fullscreen';
			public static var const_view_cloud:String = 'view.cloud';
			public static var const_application_exit:String = 'application.exit';
			public static var const_actions_scan:String = 'actions.scan';
			public static var const_help_report_problem:String = 'help.report_problem';
			public static var const_actions_getForm:String = 'actions.get.form';
			
			[Bindable]
			private var appMenu:Array = [
				{
					'label':'Polymorphic', 'name':'application', 'children':[
						{	'label':'Begin Scanning JavaScript Files...', 
							'name':Polymorphic.const_actions_scan,
							'enabled':false,
							'doFunc': function(event:MenuEvent):void {
								if (!FlexGlobals.topLevelApplication.appProxy.isLoggedIn) {
									AlertPopUp.surpriseNoOkay('You MUST Login to use this part of the application.','WARNING !!!');
								} else {
									if ((Polymorphic.uploader is FileUpload) == false) {
										var isOkayToUseUploader:Boolean = true
										
										if (isOkayToUseUploader) {
											Polymorphic.uploader = new FileUpload();
											Polymorphic.uploader.addEventListener(FlexEvent.CREATION_COMPLETE, 
												function (event:FlexEvent):void {
													var up:FileUpload = FileUpload(event.currentTarget);
													up.title = 'Choose the Root JavaScript Folder';
													up.width = FlexGlobals.topLevelApplication.stage.nativeWindow.width - 50;
													up.file_filter_description = "JavaScript (*.js)";
													up.file_filter_types = "*.js";
													up.currentState = 'Choose_Folder_WithProgress';
													up.progress.title = 'Scanning...';
													up.addFiles();
												}
											);
											Polymorphic.uploader.addEventListener(FileUploadTermsRequestedEvent.TYPE_FILE_UPLOAD_TERMS_REQUEST, 
												function (event:FileUploadTermsRequestedEvent):void {
													FlexGlobals.topLevelApplication.appProxy.splashPopUp.popUpTermsAndConditions(true);
												}
											);
											Polymorphic.uploader.addEventListener(FileUploadTermsAgreementEvent.TYPE_FILE_UPLOAD_TERMS_AGREEMENT, 
												function (event:FileUploadTermsAgreementEvent):void {
													FlexGlobals.topLevelApplication.appProxy.splashPopUp.popUpTermsAndConditions(false);
												}
											);
											Polymorphic.uploader.addEventListener(FileFolderCompletedEvent.TYPE_FILE_FOLDER_COMPLETE, 
												function (event:FileFolderCompletedEvent):void {
													var up:FileUpload = FileUpload(event.currentTarget);
													if (up is FileUpload) {
														up.parent.removeChild(up);
														Polymorphic.uploader = null;
													}
													// +++
													if (event.data is File) {
														var filename:String = event.data.nativePath;
														if (!Polymorphic.aViewer) {
															Polymorphic.aViewer = PopUpManager.createPopUp(FlexGlobals.topLevelApplication.appProxy.splashPopUp, PolymorphicViewer, true) as PolymorphicViewer;
															Polymorphic.aViewer.x = 10;
															Polymorphic.aViewer.y = 10;
															Polymorphic.aViewer.width = FlexGlobals.topLevelApplication.appProxy.splashPopUp.width - 50;
															Polymorphic.aViewer.title = filename;
															PolymorphicViewer.uploader = up;
															PolymorphicViewer._this = Polymorphic.aViewer;
															if (up is FileUpload) {
																Polymorphic.aViewer.file_type = up.file_filter_types;
																Polymorphic.aViewer.dataProvider = new ArrayCollection([filename]);
															} else {
																Polymorphic.aViewer.dataProvider = null;
															}
															Polymorphic.aViewer.height = FlexGlobals.topLevelApplication.appProxy.splashPopUp.height- FlexGlobals.topLevelApplication.appProxy.splashPopUp.menuBar.height - 50;
															Polymorphic.aViewer.addEventListener(CloseEvent.CLOSE, 
																function (event:CloseEvent):void {
																	PopUpManager.removePopUp(Polymorphic.aViewer);
																	PolymorphicViewer.uploader = null;
																	PolymorphicViewer._this = null;
																	if (Polymorphic.uploader is FileUpload) {
																		Polymorphic.uploader.parent.removeChild(Polymorphic.uploader);
																		Polymorphic.uploader = null;
																	}
																}
															);
														} else {
															PopUpManager.addPopUp(Polymorphic.aViewer, FlexGlobals.topLevelApplication.appProxy.splashPopUp, true);
														}
													} // else the user clicked the close dialog button and we got here when there was nothing uploaded - this is normal.
													// +++
												}
											);
											Polymorphic.uploader.addEventListener(FileBrowseCancelledEvent.TYPE_FILE_BROWSE_CANCELLED, 
												function (event:FileBrowseCancelledEvent):void {
													Polymorphic.uploader.parent.removeChild(Polymorphic.uploader);
													Polymorphic.uploader = null;
												}
											);
											FlexGlobals.topLevelApplication.appProxy.splashPopUp.addChild(Polymorphic.uploader);
										}
									} else {
										Polymorphic.uploader.visible = Polymorphic.uploader.enabled = true;
									}
								}
							}
						},
						{	'label':'Exit', 
							'name':Polymorphic.const_application_exit,
							'doFunc': function(event:MenuEvent):void {
								FlexGlobals.topLevelApplication.closeApplicaton();
							}
						},
					]
				},
				{
					'label':'Actions', 'name':'actions', 'enabled':function ():Boolean {return FlexGlobals.topLevelApplication.is_debugging}, 'children':[
						{	'label':'Get a Form... (experimental)', 
							'name':Polymorphic.const_actions_getForm,
							'doFunc': function(event:MenuEvent):void {
								if (!FlexGlobals.topLevelApplication.appProxy.isLoggedIn) {
									AlertPopUp.surpriseNoOkay('You MUST Login to use this part of the application.','WARNING !!!');
								} else {
									var toks:Array = FlexGlobals.topLevelApplication.AppNameSpace.app_title.split(' :: ');
									var title:String = toks[0];
									FlexGlobals.topLevelApplication.title = title+' :: Sending your Email...'
									var url:String = FlexGlobals.topLevelApplication.domain+APIHelper.get_form_endpoint;
									var ezREST:EzHTTPService = new EzHTTPService(false,false);
									ezREST.post(url,{}, 
										function (event:ResultEvent):void {
											var response:*;
											var form:String = '';
											try {
												response = (event.result is String) ? event.result : event.result.getItemAt(0);
												
												var errorMsg:String = response['error'];
												var problems:String = (errorMsg is String) && (errorMsg.length > 0) ? errorMsg : '';
												
												if ( (errorMsg is String) && (errorMsg.length > 0) ) {
													AlertPopUp.surpriseNoOkay('Some kind of system error happened.  Try again later in the day.','WARNING');
												} else {
													try {form = response['form'];} catch (err:Error) {}
													if (form) {
														var appProxy:ApplicatonProxy = FlexGlobals.topLevelApplication.appProxy;
														var formViewer:FormViewer = PopUpManager.createPopUp(appProxy.splashPopUp, FormViewer, true) as FormViewer;
														formViewer.x = 10;
														formViewer.y = 10;
														formViewer.width = appProxy.splashPopUp.width - 50;
														formViewer.dataProvider = form;
														formViewer.showCloseButton = true;
														formViewer.height = appProxy.splashPopUp.height - 50;
														formViewer.addEventListener(CloseEvent.CLOSE, 
															function (event:CloseEvent):void {
																PopUpManager.removePopUp(formViewer);
															}
														);
													}
												}
												problems = null;
											} catch (e:Error) {
												var stackTrace:String = e.getStackTrace();
												AlertPopUp.errorNoOkay(Polymorphic.const_actions_getForm+'.ERROR\n' + e.message.toString() + '\n' + StringUtils.ellipsis(stackTrace,1024),'ERROR');
											}
										}, ezREST.jsonResultType);
								}
							}
						},
					]
				},
				{
					'label':'Help', 'name':'help', 'children':[
						{	'label':'Report a Problem...', 
							'name':Polymorphic.const_help_report_problem,
							'enabled':false,
							'doFunc': function(event:MenuEvent):void {
								if ((Polymorphic.problems is ReportProblems) == false) {
									Polymorphic.problems = PopUpManager.createPopUp(FlexGlobals.topLevelApplication.appProxy.splashPopUp, ReportProblems, true) as ReportProblems;
									Polymorphic.problems.title = 'Report Problems with this Application.';
									Polymorphic.problems.x = 10;
									Polymorphic.problems.y = 10;
									Polymorphic.problems.width = 700;
									Polymorphic.problems.height = 500;
									Polymorphic.problems.showCloseButton = true;
									Polymorphic.problems.addEventListener(CloseEvent.CLOSE, 
										function (event:CloseEvent):void {
											PopUpManager.removePopUp(Polymorphic.problems);
											Polymorphic.problems = null;
										}
									);
									Polymorphic.problems.btn_send.addEventListener(MouseEvent.CLICK, 
										function (event:MouseEvent):void {
											var toks:Array = FlexGlobals.topLevelApplication.AppNameSpace.app_title.split(' :: ');
											var title:String = toks[0];
											FlexGlobals.topLevelApplication.title = title+' :: Sending your Email...'
											var url:String = FlexGlobals.topLevelApplication.domain+APIHelper.send_email_endpoint;
											var ezREST:EzHTTPService = new EzHTTPService(false,false);
											ezREST.post(url,{'fromName':Polymorphic.problems.fromName.text,'email':Polymorphic.problems.email.text,'msg':Polymorphic.problems.msg.text}, 
												function (event:ResultEvent):void {
													var response:*;
													try {
														response = (event.result is String) ? event.result : event.result.getItemAt(0);
														
														var errorMsg:String = response['error'];
														Polymorphic.problems.errorString = (errorMsg is String) && (errorMsg.length > 0) ? errorMsg : '';
														
														if ( (errorMsg is String) && (errorMsg.length > 0) ) {
															AlertPopUp.surpriseNoOkay('Your Email was not sent due to some kind of system error.  Try again later in the day.','WARNING');
														} else {
															AlertPopUp.surpriseNoOkay('Your Email was successfully sent and your issue will be resolved shortly','INFO');
														}
														PopUpManager.removePopUp(Polymorphic.problems);
														Polymorphic.problems = null;
													} catch (e:Error) {
														var stackTrace:String = e.getStackTrace();
														AlertPopUp.errorNoOkay(Polymorphic.problems.className+'.btn_send().ERROR\n' + e.message.toString() + '\n' + StringUtils.ellipsis(stackTrace,1024),'ERROR');
													}
												}, ezREST.jsonResultType);
										}
									);
									Polymorphic.problems.btn_dismiss.addEventListener(MouseEvent.CLICK, 
										function (event:MouseEvent):void {
											PopUpManager.removePopUp(Polymorphic.problems);
											Polymorphic.problems = null;
										}
									);
									PopUpManager.centerPopUp(Polymorphic.problems);
								} else {
									Polymorphic.problems.visible = Polymorphic.problems.enabled = true;
								}
							}
						},
					]
				},
				{
					'label':'View', 'name':'view', 'children':[
						{	'label':'Full Screen', 
							'name':Polymorphic.const_view_fullscreen, 
							'type':"check", 
							'toggled':false, 
							'toggledFunc':function ():Boolean {return (FlexGlobals.topLevelApplication.nativeWindow.stage.displayState != StageDisplayState.NORMAL) ? true : false}, 
							'doFunc': function(event:MenuEvent):void {
								var menu:Menu = Menu(event.menu);
								if (event.item.toggled) {
									FlexGlobals.topLevelApplication.do_fullScreen();
								} else {
									FlexGlobals.topLevelApplication.do_windowed();
								}
								menu.toolTip = FlexGlobals.topLevelApplication.nativeWindow.stage.displayState;
							}
						},
					]
				},
				{'label':'Domain', 'name':'debug.status',
					'children':[
						{	'label':'appspot.com', 
							'name':Polymorphic.const_view_cloud, 
							'type':"check", 
							'toggled':false, 
							'toggledFunc':function ():Boolean {return (FlexGlobals.topLevelApplication.is_localHost) ? false : true},
							'doFunc': function(event:MenuEvent):void {
								var menu:Menu = Menu(event.menu);
								if (event.item.toggled) {
									FlexGlobals.topLevelApplication.is_localHost = false;
								} else {
									FlexGlobals.topLevelApplication.is_localHost = true;
								}
								menu.toolTip = (this.is_localHost) ? 'LocalHost' : this.domain;
								}
						},
					]
				}
			];
			
			public var __local_domain__:String = 'http://localhost:9000';
			public var __public_domain__:String = 'https://polymorphical.appspot.com';
			
			public var icon:Loader = new Loader();
			
			public var app_icon_url:String = 'assets/icons/icons/app_icon_16.png';
			public var app_icon128_url:String = 'assets/icons/icons/app_icon_128.png';
			public var _icon:AppIcon = new AppIcon([app_icon_url,'assets/icons/icons/app_icon_32.png','assets/icons/icons/app_icon_48.png',app_icon128_url]);

			public function get domain():String {
				var domain:String = (this.appProxy.is_debugging) ? this.__local_domain__ : this.__public_domain__;
				trace(this.className+'.domain --> this.is_debugging='+this.appProxy.is_debugging+', domain='+domain);
				return domain;
			}
			
			public function get insecure_public_domain():String {
				return this.__public_domain__.replace('https://','http://');
			}
			
			public function get is_localHost():Boolean {
				return this.domain == this.__local_domain__;
			}
			
			public function set is_localHost(is_localHost:Boolean):void {
				this.__is_localhost__ = is_localHost;
			}
			
			private function onCreationComplete_appProxy():void {
				var _this:Polymorphic = this;
				trace(this.className+'.onCreationComplete_appProxy().1 !');
				this.appProxy.addEventListener(TermsAndConditionsAgreementEvent.TYPE_TERMSANDCONDITIONS_AGREEMENT,
					function(event:TermsAndConditionsAgreementEvent):void {
						if (_this['uploader'] is FileUpload) {
							_this['uploader']['refresh_terms_and_conditions_checkbox_selection']();
						}
					}
				);
				this.appProxy.addEventListener(TermsAndConditionsNoAgreementEvent.TYPE_TERMSANDCONDITIONS_NO_AGREEMENT,
					function(event:TermsAndConditionsNoAgreementEvent):void {
						if (_this['uploader'] is FileUpload) {
							_this['uploader']['refresh_terms_and_conditions_checkbox_selection']();
						}
					}
				);
				this.appProxy.TermsAndConditionsClass = this.TermsAndConditionsClass;
				this.appProxy['_onCreationComplete_appProxy'](this.appMenu);
			}
			
			private function onCreationComplete_AppNameSpace():void {
				this._copyrightMessage = this.AppNameSpace._copyrightMessage;
			}

			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void {
				this.splashPopUp = this;
			}

		]]>
	</fx:Script>
	<application:ApplicationNamespace id="AppNameSpace" x="0" y="0" width="0" height="0" creationComplete="onCreationComplete_AppNameSpace()"/>
	<application:ApplicatonProxy id="appProxy" NativeApplicationUpdater="{NativeApplicationUpdater}" no_choice="true" AppNameSpace="{this.AppNameSpace}" x="0" y="0" width="100%" height="100%" creationComplete="onCreationComplete_appProxy()"/>
</s:WindowedApplication>
