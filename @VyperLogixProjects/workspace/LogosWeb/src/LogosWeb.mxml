<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:application="application.*" 
			   minWidth="955" minHeight="800" 
			   initialize="application1_initializeHandler(event)" 
			   xmlns:splash="splash.*">
	<s:states>
		<s:State name="not_logged_in"/>
		<s:State name="logged_in"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel.ttf");
			fontFamily: NeoSansIntel;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Light.ttf");
			fontFamily: NeoSansIntelLight;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Light.ttf");
			fontFamily: NeoSansIntelLight2;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("assets/fonts/NeoSansIntel-Medium.ttf");
			fontFamily: NeoSansIntelMedium2;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("assets/fonts/CALIBRI.TTF");
			fontFamily: Calibri;
			embedAsCFF: false;
		}
		
		.splash_movie_canvas {
			backgroundColor: #ffffff;
		}
		
		.LoginPanel {
			borderStyle: none;
			borderColor: #3300ff;
			borderThickness: 3;
			roundedBottomCorners: true;
			cornerRadius: 8;
			headerHeight: 31;
			headerColors: #0033ff, #330099;
			backgroundColor: #ffffff;
			backgroundAlpha: 0.3;
			shadowDistance: 6;
			shadowDirection: right;
			titleStyleName: "LoginPanelTitle";
		}
		
		mx|Label {
			fontFamily: NeoSansIntelMedium2;
			fontSize: 11;
			color: black;
		}
		
		mx|LinkButton {
			fontFamily: NeoSansIntelMedium2;
			fontSize: 12;
			color: black;
		}
		
		.MessageBannerLabel {
			fontFamily: NeoSansIntelMedium2;
			fontSize: 16;
			color: black;
		}
		
		.PromptLabel {
			fontFamily: NeoSansIntelLight;
			fontSize: 14;
			color: blue;
		}
		
		.InfoLabel {
			fontFamily: NeoSansIntelLight2;
			fontSize: 14;
			color: red;
		}
		
		.CopyrightLabel {
			fontFamily: NeoSansIntelMedium2;
			fontSize: 12;
			color: black;
		}
		
		.SponsorLinkButton {
			fontFamily: NeoSansIntelMedium2;
			fontSize: 12;
			color: black;
		}
		
		.LoginPanelTitle {
			fontFamily: Calibri;
			fontSize: 16;
		}
		
		.ErrorMessages {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: red;
		}
		
		.NormalMessages {
			fontFamily: Calibri;
			fontSize: 14;
			color: black;
		}
		
		.ImportantMessage {
			fontFamily: Calibri;
			fontSize: 14;
			fontWeight: bold;
			color: blue;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.DebuggerUtils;
			import com.adobe.serialization.json.JSON;
			
			import controls.Alert.AlertPopUp;
			
			import flash.net.navigateToURL;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import utils.TermsAndConditionsHelper;
			
			import views.ImageCreator;
			
			import vyperlogix.events.CompletedUserLoginEvent;
			import vyperlogix.views.TermsAndConditions;
			
			public var __local_domain__:String = 'http://localhost:9000';
			private var __domain__:String = '';
			
			public static var tool_name:String = 'gliif_maker';
			
			public static var sponsors_url:String = 'http://vyperlogix.com/vyperlogos.html';
			
			[Embed(source="assets/data/data.json", mimeType="application/octet-stream")]
			private static const dataJSON:Class;
			
			private var _dataSet_:Array = [];

			[Bindable]
			private var _title_:String;
			
			public var app_id:String = 'Logos';
			public var build_number:String = '0.1.1.0';
			
			public function get domain():String {
				var domain:String = this.__local_domain__;
				try {
					var url:String = FlexGlobals.topLevelApplication.url;
					var toks:Array = url.split('://');
					var protocol:String = toks[0].toLowerCase();
					if (this.__domain__.length == 0) {
						if (protocol != 'file') {
							var toks2:Array = toks[toks.length-1].split('/');
							domain = protocol+'://'+toks2[0];
						}
					} else {
						domain = this.__domain__;
					}
				} catch (err:Error) {
					DebuggerUtils._trace(this.className+'.'+DebuggerUtils.getFunctionName(new Error())+'.ERROR --> err='+err.toString());
				}
				DebuggerUtils._trace(this.className+'.'+DebuggerUtils.getFunctionName(new Error())+' --> this.is_debugging='+this.appProxy.is_debugging+', domain='+domain);
				return domain;
			}
			
			public function get title():String {
				return this._title_;
			}
			
			public function set title(title:String):void {
				if (this._title_ != title) {
					this._title_ = title;
					if (this.titleWindow is TitleWindow) {
						this.titleWindow.title = title;
					}
				}
			}
			
			public static function navigate_to_url(url:String,target:String):void {
				var request:URLRequest = new URLRequest(url);
				navigateToURL(request,target); 				
			}
			
			protected function linkbutton1_clickHandler(event:MouseEvent):void {
				LogosWeb.navigate_to_url(LogosWeb.sponsors_url,'_blank');
			}
			
			protected function onCreationComplete_container(event:FlexEvent):void {
				var target:Canvas = Canvas(event.currentTarget);
				var tool:ImageCreator = new ImageCreator();
				tool.x = 0;
				tool.y = 0;
				tool.name = LogosWeb.tool_name;
				tool.width = this.width;
				tool.height = this.height;
				tool.is_production = true;
				tool.is_static_demo = false;
				tool.dataSet = this._dataSet_;
				tool.verticalScrollPolicy = 'off';
				tool.horizontalScrollPolicy = 'off';
				this.container.addChild(tool);
			}

			protected function application1_initializeHandler(event:FlexEvent):void {
				this.currentState = 'not_logged_in';
				var json:String = new dataJSON().toString();
				this._dataSet_ = JSON.decode(json);
				try {
					Security.allowDomain("*");
				} catch (err:Error) {}
			}


			protected function btn_makeImage_clickHandler(event:MouseEvent):void {
				var tool:ImageCreator = this.container.getChildByName(LogosWeb.tool_name) as ImageCreator;
				if (tool is ImageCreator) {
					tool.handle_addGUID();
				}
			}

			private function onCreationComplete_appProxy():void {
				DebuggerUtils._trace(this.className+'.'+DebuggerUtils.getFunctionName(new Error())+'.1 !');
				this.appProxy._onCreationComplete_appProxy(null);
			}

			protected function splashMovie_creationCompleteHandler(event:FlexEvent):void {
				var _this:LogosWeb = this;
				this.splashPopUp.menuBar.visible = this.splashPopUp.menuBar.includeInLayout = false;
				this.splashPopUp.addEventListener(CompletedUserLoginEvent.TYPE_COMPLETED_USER_LOGIN, 
					function (event:CompletedUserLoginEvent):void {
						_this.currentState = (_this.appProxy.isLoggedIn) ? 'logged_in' : 'not_logged_in';
					}
				);
			}

			protected function onCreationComplete_titleWindow():void {
				this.titleWindow.title = this.title;
			}
		]]>
	</fx:Script>
	<mx:TitleWindow id="titleWindow" x="0" y="0" width="100%" height="100%" showCloseButton="false" creationComplete="onCreationComplete_titleWindow()">
		<splash:SplashMovie id="splashPopUp" x="0" y="0" width="100%" height="100%" visible.logged_in="false" includeInLayout.logged_in="false" visible.not_logged_in="true" includeInLayout.not_logged_in="true" creationComplete="splashMovie_creationCompleteHandler(event)"/>
		<mx:VBox width="100%" height="100%" visible.not_logged_in="false" includeInLayout.not_logged_in="false" visible.logged_in="true" includeInLayout.logged_in="true">
			<mx:Label styleName="MessageBannerLabel" text="This is a very early rough prototype/demo of the Gliif System."/>
			<mx:HBox width="100%">
				<mx:Label styleName="PromptLabel" text="Enter your URL:"/>
				<mx:TextInput id="txt_url" text="" width="30%"/>
				<mx:Spacer width="20"/>
				<mx:Button id="btn_makeImage" label="Make Gliif" click="btn_makeImage_clickHandler(event)"/>
				<mx:Label styleName="InfoLabel" text="(This Demo simply makes a unique Gliif for every URL entered.  For Demonstration Purposes only.)"/>
			</mx:HBox>
			<mx:Canvas id="container" x="0" y="0" width="100%" height="100%" creationComplete="onCreationComplete_container(event)"/>
			<mx:HBox width="100%">
				<mx:Label styleName="CopyrightLabel" text="(c). Copyright 2011,"/>
				<mx:LinkButton styleName="SponsorLinkButton" label="Vyper Logix Corp." click="linkbutton1_clickHandler(event)"/>
				<mx:Label styleName="CopyrightLabel" text=", All Rights Reserved."/>
			</mx:HBox>
		</mx:VBox>
	</mx:TitleWindow>
	<application:ApplicatonProxy id="appProxy" TermsAndConditionsClass="{TermsAndConditionsHelper.TermsAndConditionsCls}" x="0" y="0" width="100%" height="100%" creationComplete="onCreationComplete_appProxy()"/>
</s:Application>
